function bool = is_rawpos(rawpos)
%IS_RAWPOS Validate whether the input is a raw rawpos data struct array
%
%   IS_RAWPOS(RAWPOS) returns true if RAWPOS is a struct array that contains
%   valid raw pixel coordinates from nspike_rawpos
%   
%   See also READ_RAWPOS, written by smk.
%
%Depends on:
%   VIDEO_READER (MATLAB class written by smk)
%
%Written by SMK 2009 June 22.
%

REQUIRED_FIELDS = { ...
    'subject'     , ...
    'day'         , ...
    'epoch'       , ...
    'environment' , ...
    'timestamp'   , ...
    'xfront'      , ...
    'yfront'      , ...
    'xback'       , ...
    'yback'       , ...
    'units'       , ...
    'video_frame' , ...
    'sources'     };

if (exist('video_reader') ~= 2)
  error('IS_RAWPOS depends on VIDEO_READER class (written by smk)');
end

if isempty(rawpos) && isstruct(rawpos) && ...
    all(isfield(rawpos,REQUIRED_FIELDS))
  warning('RAWPOS struct is empty');
  bool = true;

elseif ~isstruct(rawpos) || ~all(isfield(rawpos,REQUIRED_FIELDS))
  warning('missing required field(s)');
  bool = false;

elseif ~iscellstr({rawpos(:).subject}) || ...
    ~all(strcmp({rawpos(:).subject}, ...
    regexp({rawpos(:).subject},'[a-zA-Z0-9]*','match','once')))
  warning(['subject field must be a string containing characters ' ...
      '[a-zA-Z0-9]']);
  bool = false;

elseif ~all(cellfun(@isnumeric,{rawpos(:).day})) || ...
    ~all(cellfun(@isscalar,{rawpos(:).day})) || ...
    ~all(cellfun(@isreal,{rawpos(:).day})) || ...
    ~all(cellfun(@isfinite,{rawpos(:).day})) || ...
    ~all(cellfun(@(c) (c >= 0),{rawpos(:).day})) || ...
    ~all(cellfun(@(c) (round(c) == c),{rawpos(:).day}))
  warning('day field must be a real non-negative integer scalar');
  bool = false;

elseif ~iscellstr({rawpos(:).epoch}) || ...
    ~all(strcmp({rawpos(:).epoch}, ...
    regexp({rawpos(:).epoch},'[a-zA-Z0-9]*','match','once')))
  warning(['epoch field must be a string containing characters ' ...
      '[a-zA-Z0-9]']);
  bool = false;

elseif ~iscellstr({rawpos(:).environment}) || ...
    ~all(strcmp({rawpos(:).environment}, ...
    regexp({rawpos(:).environment},'[a-zA-Z0-9]*','match','once')))
  warning(['environment field must be a string containing characters ' ...
      '[a-zA-Z0-9]']);
  bool = false;

elseif ~all(cellfun(@isnumeric,{rawpos(:).timestamp})) || ...
    ~all(cellfun(@(c) isa(c,'uint32'),{rawpos(:).timestamp})) || ...
    ~all(cellfun(@isvector,{rawpos(:).timestamp})) || ...
    ~all(cellfun(@(c) (size(c,2) == 1),{rawpos(:).timestamp})) || ...
    ~all(cellfun(@(c) isreal(c),{rawpos(:).timestamp})) || ...
    ~all(cellfun(@(c) all(diff(c) > 0),{rawpos(:).timestamp}))
  warning(['timestamp field must be a column vector of strictly ' ...
      'monotonically increasing real uint32 timestamps']);
  bool = false;

elseif ~all(cellfun(@isnumeric,{rawpos(:).xfront})) || ...
    ~all(cellfun(@(c) isa(c,'single'),{rawpos(:).xfront})) || ...
    ~all(cellfun(@isvector,{rawpos(:).xfront})) || ...
    ~all(cellfun(@(c) (size(c,2) == 1),{rawpos(:).xfront})) || ...
    ~all(cellfun(@(c) isreal(c),{rawpos(:).xfront}))
  warning(['xfront field must be a column vector of single float pixel ' ...
      'coordinates']);
  bool = false;

elseif ~all(cellfun(@isnumeric,{rawpos(:).yfront})) || ...
    ~all(cellfun(@(c) isa(c,'single'),{rawpos(:).yfront})) || ...
    ~all(cellfun(@isvector,{rawpos(:).yfront})) || ...
    ~all(cellfun(@(c) (size(c,2) == 1),{rawpos(:).yfront})) || ...
    ~all(cellfun(@(c) isreal(c),{rawpos(:).yfront}))
  warning(['yfront field must be a column vector of single float pixel ' ...
      'coordinates']);
  bool = false;

elseif ~all(cellfun(@isnumeric,{rawpos(:).xback})) || ...
    ~all(cellfun(@(c) isa(c,'single'),{rawpos(:).xback})) || ...
    ~all(cellfun(@(c) isvector(c) || isempty(c),{rawpos(:).xback})) || ...
    ~all(cellfun(@(c) (size(c,2) == 1) || isempty(c),{rawpos(:).xback})) || ...
    ~all(cellfun(@(c) isreal(c) || isempty(c),{rawpos(:).xback}))
  warning(['xback field must be a column vector of single float pixel ' ...
      'coordinates or an empty array']);
  bool = false;

elseif ~all(cellfun(@isnumeric,{rawpos(:).yback})) || ...
    ~all(cellfun(@(c) isa(c,'single'),{rawpos(:).yback})) || ...
    ~all(cellfun(@(c) isvector(c) || isempty(c),{rawpos(:).yback})) || ...
    ~all(cellfun(@(c) (size(c,2) == 1) || isempty(c),{rawpos(:).yback})) || ...
    ~all(cellfun(@(c) isreal(c) || isempty(c),{rawpos(:).yback}))
  warning(['yback field must be a column vector of single float pixel ' ...
      'coordinates or an empty array']);
  bool = false;

elseif any(arrayfun(@(s) xor(isempty(s.xback),isempty(s.yback)),rawpos))
  warning('xback and yback fields must be *both* empty or *both* non-empty');
  bool = false;

elseif ~all(arrayfun(@(s) numel(s.xfront) == numel(s.timestamp),rawpos))
  warning('timestamp field and xfront field must agree in size')
  bool = false;

elseif ~all(arrayfun(@(s) numel(s.yfront) == numel(s.timestamp),rawpos))
  warning('timestamp field and yfront field must agree in size')
  bool = false;

elseif ~all(arrayfun(@(s) isempty(s.xback) || ...
    (numel(s.xback) == numel(s.timestamp)),rawpos))
  warning('timestamp field and xback field must agree in size')
  bool = false;

elseif ~all(arrayfun(@(s) isempty(s.yback) || ...
    numel(s.yback) == numel(s.timestamp),rawpos))
  warning('timestamp field and yback field must agree in size')
  bool = false;

elseif ~iscellstr({rawpos(:).units}) || ...
    ~all(cellfun(@(c) any(strcmp(c,{'pixels','px','pixel'})), ...
    {rawpos(:).units}))
  warning(['units field must be a string containing characters ' ...
      '[a-zA-Z0-9]']);
  bool = false;

elseif ~all(cellfun(@(c) isa(c,'uint8'),{rawpos(:).video_frame})) || ...
    ~all(cellfun(@(c) ndims(c) == 3,{rawpos(:).video_frame})) || ...
    ~all(cellfun(@(c) size(c,3) == 3,{rawpos(:).video_frame}))
  warning('video_frame field must be an image array of uint8 RGB values');
  bool = false;

elseif ~all(cellfun(@(c) iscellstr(c),{rawpos(:).sources})) || ...
    ~all(cellfun(@(c1) all(cellfun(@(c2) (exist(c2) == 2),c1)), ...
    {rawpos(:).sources})) || ...
    ~all(cellfun(@(c1) all(cellfun(@(c2) isdir(fileparts(c2)),c1)), ...
    {rawpos(:).sources}))
  warning(['sources field must be a cell array of strings that specify ' ...
      'filenames, including path']);
  bool = false;

else
  [i1, i2] = ndgrid(1:numel(rawpos));
  pair_idx = find(i1 ~= i2);
  i1 = i1(pair_idx);
  i2 = i2(pair_idx);
  % Check that no two elements of rawpos duplicate the same
  % (subject, day, epoch) 3-tuple
  if any(arrayfun(@(s1,s2) isequal( ...
      {s1.subject, s1.day, s1.epoch}, ...
      {s2.subject, s2.day, s2.epoch}),rawpos(i1),rawpos(i2)))
    bool = false;
  % Check that no two elements of rawpos which share the same 
  % (subject, day) 2-tuple have overlapping timestamps
  elseif any( arrayfun(@(s1,s2) isequal( ...
      {s1.subject, s1.day},{s2.subject, s2.day}), ...
      rawpos(i1),rawpos(i2)) & ...
      arrayfun(@(s1,s2) ...
      ~(all(s1.timestamp < min(s2.timestamp)) || ...
      all(s1.timestamp > max(s2.timestamp))), ...
      rawpos(i1),rawpos(i2)) )
    bool = false;
  else
    bool = true;
  end

end

