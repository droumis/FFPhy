function registerpos_Wtrack_batch()
% define a Wtrack image registration transform for each room; 
% apply to position data from the corresponding sessions

load('/data15/smkim/Wtrack_template.mat');
load('rawpos.mat');
try
    load('registeredpos.mat');
end

for i = 1:length(rawpos)

    %%%%% start block for room1
    sampleframe_room1 = rawpos{i}{2}.sampleframe;
    main = figure();
    image(Wtrack_template.controlpoints_guide);
    set(gca,'DataAspectRatio',[1 1 1],'YDir','reverse','Visible','off');
    popup = msgbox('click on control points in this sequence; press [space] to confirm selection','modal');
    popup_contents = get(popup,'Children');
    uiwait(popup);
    close(gcf);
    % fit axes to the size of the image frame
    image([0.5 size(sampleframe_room1,2)-0.5], ...
        [0.5 size(sampleframe_room1,1)-0.5], ...
        sampleframe_room1,'AlphaData',1); 
    set(gca,'DataAspectRatio',[1 1 1],'YDir','normal','Box','on');
    % define a UserData struct which packages relevant info
    UserData.controlpoints = ginput(size(Wtrack_template.controlpoints,1));
    % draw the segments of the track and collect object handles
    % in the array linehdl
    UserData.linehdl = [];
    UserData.linehdl(1) = line( ...
        [UserData.controlpoints(1,1); UserData.controlpoints(2,1)], ... 
        [UserData.controlpoints(1,2); UserData.controlpoints(2,2)], ...
        'Color','r','Marker','o','MarkerSize',4, ...
        'MarkerFaceColor','r','HitTest','off');
    UserData.linehdl(2) = line( ...
        [UserData.controlpoints(2,1); UserData.controlpoints(8,1)], ... 
        [UserData.controlpoints(2,2); UserData.controlpoints(8,2)], ...
        'Color','r','Marker','o','MarkerSize',4, ...
        'MarkerFaceColor','r','HitTest','off');
    UserData.linehdl(3) = line( ...
        [UserData.controlpoints(8,1); UserData.controlpoints(9,1)], ... 
        [UserData.controlpoints(8,2); UserData.controlpoints(9,2)], ...
        'Color','r','Marker','o','MarkerSize',4, ...
        'MarkerFaceColor','r','HitTest','off');
    UserData.linehdl(4) = line( ...
        [UserData.controlpoints(9,1); UserData.controlpoints(3,1)], ... 
        [UserData.controlpoints(9,2); UserData.controlpoints(3,2)], ...
        'Color','r','Marker','o','MarkerSize',4, ...
        'MarkerFaceColor','r','HitTest','off');
    UserData.linehdl(5) = line( ...
        [UserData.controlpoints(3,1); UserData.controlpoints(4,1)], ... 
        [UserData.controlpoints(3,2); UserData.controlpoints(4,2)], ...
        'Color','r','Marker','o','MarkerSize',4, ...
        'MarkerFaceColor','r','HitTest','off');
    UserData.linehdl(6) = line( ...
        [UserData.controlpoints(4,1); UserData.controlpoints(10,1)], ... 
        [UserData.controlpoints(4,2); UserData.controlpoints(10,2)], ...
        'Color','r','Marker','o','MarkerSize',4, ...
        'MarkerFaceColor','r','HitTest','off');
    UserData.linehdl(7) = line( ...
        [UserData.controlpoints(10,1); UserData.controlpoints(11,1)], ... 
        [UserData.controlpoints(10,2); UserData.controlpoints(11,2)], ...
        'Color','r','Marker','o','MarkerSize',4, ...
        'MarkerFaceColor','r','HitTest','off');
    UserData.linehdl(8) = line( ...
        [UserData.controlpoints(11,1); UserData.controlpoints(5,1)], ... 
        [UserData.controlpoints(11,2); UserData.controlpoints(5,2)], ...
        'Color','r','Marker','o','MarkerSize',4, ...
        'MarkerFaceColor','r','HitTest','off');
    UserData.linehdl(9) = line( ...
        [UserData.controlpoints(5,1); UserData.controlpoints(6,1)], ... 
        [UserData.controlpoints(5,2); UserData.controlpoints(6,2)], ...
        'Color','r','Marker','o','MarkerSize',4, ...
        'MarkerFaceColor','r','HitTest','off');
    UserData.linehdl(10) = line( ...
        [UserData.controlpoints(6,1); UserData.controlpoints(12,1)], ... 
        [UserData.controlpoints(6,2); UserData.controlpoints(12,2)], ...
        'Color','r','Marker','o','MarkerSize',4, ...
        'MarkerFaceColor','r','HitTest','off');
    UserData.linehdl(11) = line( ...
        [UserData.controlpoints(12,1); UserData.controlpoints(7,1)], ... 
        [UserData.controlpoints(12,2); UserData.controlpoints(7,2)], ...
        'Color','r','Marker','o','MarkerSize',4, ...
        'MarkerFaceColor','r','HitTest','off');
    UserData.linehdl(12) = line( ...
        [UserData.controlpoints(7,1); UserData.controlpoints(1,1)], ... 
        [UserData.controlpoints(7,2); UserData.controlpoints(1,2)], ...
        'Color','r','Marker','o','MarkerSize',4, ...
        'MarkerFaceColor','r','HitTest','off');
    % last location of the mouse cursor
    UserData.lastxy = [];
    % currently-selected vertex
    UserData.selectedvertex = 0;
    % flag for whether the user is finished with input
    UserData.finished = 0;
    % GUI callback hooks
    set(main,'KeyPressFcn',@interceptkeypress, ...
    'WindowButtonDownFcn',@mousebuttondown,'UserData',UserData);
    % now let the user adjust the controlpoints as desired until
    % the [spacebar] is pressed to commmit the controlpoints
    while 1
        waitforbuttonpress;
        UserData = get(main,'UserData');
        if UserData.finished
            break;
        end
    end
    close(gcf);
    % keep this image transform and apply to all datasets for that day
    tform_room1 = cp2tform(UserData.controlpoints,Wtrack_template.controlpoints,'projective');
    for j = [2 6]
        registeredpos{i}{j} = rawpos{i}{j};
        registeredpos{i}{j}.descript = 'position data registered to template';
        registeredpos{i}{j} = rmfield(registeredpos{i}{j},{'sampleframe'});
        registeredpos{i}{j}.data(:,1) = rawpos{i}{j}.data(:,1);
        registeredpos{i}{j}.data(:,2:3) = tform_room1.forward_fcn(rawpos{i}{j}.data(:,2:3),tform_room1);
        registeredpos{i}{j}.data(:,4:5) = tform_room1.forward_fcn(rawpos{i}{j}.data(:,4:5),tform_room1);
        registeredpos{i}{j}.registeredframe = imtransform(rawpos{i}{j}.sampleframe,tform_room1);
        registeredpos{i}{j}.template = Wtrack_template;
        registeredpos{i}{j}.transform = tform_room1;
    end
    %%%%%% end block for room1

    %%%%% start block for room2
    sampleframe_room2 = rawpos{i}{4}.sampleframe;
    main = figure();
    image(Wtrack_template.controlpoints_guide);
    set(gca,'DataAspectRatio',[1 1 1],'YDir','reverse','Visible','off');
    popup = msgbox('click on control points in this sequence; press [space] to confirm selection','modal');
    popup_contents = get(popup,'Children');
    uiwait(popup);
    close(gcf);
    % fit axes to the size of the image frame
    image([0.5 size(sampleframe_room2,2)-0.5], ...
        [0.5 size(sampleframe_room2,1)-0.5], ...
        sampleframe_room2,'AlphaData',1); 
    set(gca,'DataAspectRatio',[1 1 1],'YDir','normal','Box','on');
    % define a UserData struct which packages relevant info
    UserData.controlpoints = ginput(size(Wtrack_template.controlpoints,1));
    % draw the segments of the track and collect object handles
    % in the array linehdl
    UserData.linehdl = [];
    UserData.linehdl(1) = line( ...
        [UserData.controlpoints(1,1); UserData.controlpoints(2,1)], ... 
        [UserData.controlpoints(1,2); UserData.controlpoints(2,2)], ...
        'Color','r','Marker','o','MarkerSize',4, ...
        'MarkerFaceColor','r','HitTest','off');
    UserData.linehdl(2) = line( ...
        [UserData.controlpoints(2,1); UserData.controlpoints(8,1)], ... 
        [UserData.controlpoints(2,2); UserData.controlpoints(8,2)], ...
        'Color','r','Marker','o','MarkerSize',4, ...
        'MarkerFaceColor','r','HitTest','off');
    UserData.linehdl(3) = line( ...
        [UserData.controlpoints(8,1); UserData.controlpoints(9,1)], ... 
        [UserData.controlpoints(8,2); UserData.controlpoints(9,2)], ...
        'Color','r','Marker','o','MarkerSize',4, ...
        'MarkerFaceColor','r','HitTest','off');
    UserData.linehdl(4) = line( ...
        [UserData.controlpoints(9,1); UserData.controlpoints(3,1)], ... 
        [UserData.controlpoints(9,2); UserData.controlpoints(3,2)], ...
        'Color','r','Marker','o','MarkerSize',4, ...
        'MarkerFaceColor','r','HitTest','off');
    UserData.linehdl(5) = line( ...
        [UserData.controlpoints(3,1); UserData.controlpoints(4,1)], ... 
        [UserData.controlpoints(3,2); UserData.controlpoints(4,2)], ...
        'Color','r','Marker','o','MarkerSize',4, ...
        'MarkerFaceColor','r','HitTest','off');
    UserData.linehdl(6) = line( ...
        [UserData.controlpoints(4,1); UserData.controlpoints(10,1)], ... 
        [UserData.controlpoints(4,2); UserData.controlpoints(10,2)], ...
        'Color','r','Marker','o','MarkerSize',4, ...
        'MarkerFaceColor','r','HitTest','off');
    UserData.linehdl(7) = line( ...
        [UserData.controlpoints(10,1); UserData.controlpoints(11,1)], ... 
        [UserData.controlpoints(10,2); UserData.controlpoints(11,2)], ...
        'Color','r','Marker','o','MarkerSize',4, ...
        'MarkerFaceColor','r','HitTest','off');
    UserData.linehdl(8) = line( ...
        [UserData.controlpoints(11,1); UserData.controlpoints(5,1)], ... 
        [UserData.controlpoints(11,2); UserData.controlpoints(5,2)], ...
        'Color','r','Marker','o','MarkerSize',4, ...
        'MarkerFaceColor','r','HitTest','off');
    UserData.linehdl(9) = line( ...
        [UserData.controlpoints(5,1); UserData.controlpoints(6,1)], ... 
        [UserData.controlpoints(5,2); UserData.controlpoints(6,2)], ...
        'Color','r','Marker','o','MarkerSize',4, ...
        'MarkerFaceColor','r','HitTest','off');
    UserData.linehdl(10) = line( ...
        [UserData.controlpoints(6,1); UserData.controlpoints(12,1)], ... 
        [UserData.controlpoints(6,2); UserData.controlpoints(12,2)], ...
        'Color','r','Marker','o','MarkerSize',4, ...
        'MarkerFaceColor','r','HitTest','off');
    UserData.linehdl(11) = line( ...
        [UserData.controlpoints(12,1); UserData.controlpoints(7,1)], ... 
        [UserData.controlpoints(12,2); UserData.controlpoints(7,2)], ...
        'Color','r','Marker','o','MarkerSize',4, ...
        'MarkerFaceColor','r','HitTest','off');
    UserData.linehdl(12) = line( ...
        [UserData.controlpoints(7,1); UserData.controlpoints(1,1)], ... 
        [UserData.controlpoints(7,2); UserData.controlpoints(1,2)], ...
        'Color','r','Marker','o','MarkerSize',4, ...
        'MarkerFaceColor','r','HitTest','off');
    % last location of the mouse cursor
    UserData.lastxy = [];
    % currently-selected vertex
    UserData.selectedvertex = 0;
    % flag for whether the user is finished with input
    UserData.finished = 0;
    % GUI callback hooks
    set(main,'KeyPressFcn',@interceptkeypress, ...
    'WindowButtonDownFcn',@mousebuttondown,'UserData',UserData);
    % now let the user adjust the controlpoints as desired until
    % the [spacebar] is pressed to commmit the controlpoints
    while 1
        waitforbuttonpress;
        UserData = get(main,'UserData');
        if UserData.finished
            break;
        end
    end
    close(gcf);
    % keep this image transform and apply to all datasets for that day
    tform_room2 = cp2tform(UserData.controlpoints,Wtrack_template.controlpoints,'projective');
    for j = [ 4 ]
        registeredpos{i}{j} = rawpos{i}{j};
        registeredpos{i}{j}.descript = 'position data registered to template';
        registeredpos{i}{j} = rmfield(registeredpos{i}{j},{'sampleframe'});
        registeredpos{i}{j}.data(:,1) = rawpos{i}{j}.data(:,1);
        registeredpos{i}{j}.data(:,2:3) = tform_room2.forward_fcn(rawpos{i}{j}.data(:,2:3),tform_room2);
        registeredpos{i}{j}.data(:,4:5) = tform_room2.forward_fcn(rawpos{i}{j}.data(:,4:5),tform_room2);
        registeredpos{i}{j}.registeredframe = imtransform(rawpos{i}{j}.sampleframe,tform_room2);
        registeredpos{i}{j}.template = Wtrack_template;
        registeredpos{i}{j}.transform = tform_room2;
    end
    %%%%%% end block for room2

end

% save results
save('registeredpos.mat','registeredpos');
clear('registered','rawpos');

end % main function end

%----------------------------------------------------------------------
function mousebuttondown(obj,eventdata)
    % grab a local copy of UserData
    UserData = get(obj,'UserData');
    % define a proximity within which a mouse click
    % captures the nearest vertex
    axeshandle = get(obj,'CurrentAxes');
    set(obj,'Units','pixels');
    set(axeshandle,'Units','pixels');
    axes_xlim = get(axeshandle,'XLim'); % axis coords (cm)
    axes_position = get(axeshandle,'Position'); % axes in screen pixels
    axes_width = axes_position(3); % pixels
    scale_x = (axes_xlim(2) - axes_xlim(1))/axes_width; % cm/pixel
    HITRADIUS = 10*scale_x; % what distance does 10 pixels correspond to?
    % reassign callbacks
    set(obj,'WindowButtonMotionFcn',@mousedrag);
    set(obj,'WindowButtonDownFcn','');
    set(obj,'WindowButtonUpFcn',@mousebuttonup);
    % figure out where the current cursor is
    UserData.lastxy = getxycursorpos(obj);
    dist = hypot( ...
        UserData.controlpoints(:,1) - UserData.lastxy(1), ...
        UserData.controlpoints(:,2) - UserData.lastxy(2) );
    [mindist, minidx] = min(dist);
    if mindist < HITRADIUS
        UserData.selectedvertex = minidx;
    else
        UserData.selectedvertex = 0;
    end
    disp(UserData)
    % copy UserData back to main
    set(obj,'UserData',UserData);
end % end callback mousebuttondown


%----------------------------------------------------------------------
function mousebuttonup(obj,eventdata)
    % grab a local copy of UserData
    UserData = get(obj,'UserData');
    set(obj,'WindowButtonDownFcn',@mousebuttondown);
    set(obj,'WindowButtonMotionFcn','');
    UserData.lastxy = [];
    % copy UserData back to main
    set(obj,'UserData',UserData);
end % end callback mousebuttonup

%----------------------------------------------------------------------
function mousedrag(obj,eventdata)
    % grab a local copy of UserData
    UserData = get(obj,'UserData');
    axes_xlim = get(get(obj,'CurrentAxes'),'XLim');
    axes_ylim = get(get(obj,'CurrentAxes'),'YLim');
    set(obj,'WindowButtonDownFcn','');
    set(obj,'WindowButtonUpFcn',@mousebuttonup);
    % adjust controlpoints by the amount that CurrentPoint changed
    newxy = getxycursorpos(obj);
    if ~isempty(UserData.lastxy) && UserData.selectedvertex && ...
    (newxy(1) > axes_xlim(1)) && (newxy(1) < axes_xlim(2)) && ...
    (newxy(2) > axes_ylim(1)) && (newxy(2) < axes_ylim(2))
        UserData.controlpoints(UserData.selectedvertex,:) = ...
        UserData.controlpoints(UserData.selectedvertex,:) + (newxy - UserData.lastxy);
        set(UserData.linehdl(1), ...
            'XData',[UserData.controlpoints(1,1); UserData.controlpoints(2,1)], ... 
            'YData',[UserData.controlpoints(1,2); UserData.controlpoints(2,2)]);
        set(UserData.linehdl(2), ...
            'XData',[UserData.controlpoints(2,1); UserData.controlpoints(8,1)], ... 
            'YData',[UserData.controlpoints(2,2); UserData.controlpoints(8,2)]);
        set(UserData.linehdl(3), ...
            'XData',[UserData.controlpoints(8,1); UserData.controlpoints(9,1)], ... 
            'YData',[UserData.controlpoints(8,2); UserData.controlpoints(9,2)]);
        set(UserData.linehdl(4), ...
            'XData',[UserData.controlpoints(9,1); UserData.controlpoints(3,1)], ... 
            'YData',[UserData.controlpoints(9,2); UserData.controlpoints(3,2)]);
        set(UserData.linehdl(5), ...
            'XData',[UserData.controlpoints(3,1); UserData.controlpoints(4,1)], ... 
            'YData',[UserData.controlpoints(3,2); UserData.controlpoints(4,2)]);
        set(UserData.linehdl(6), ...
            'XData',[UserData.controlpoints(4,1); UserData.controlpoints(10,1)], ... 
            'YData',[UserData.controlpoints(4,2); UserData.controlpoints(10,2)]);
        set(UserData.linehdl(7), ...
            'XData',[UserData.controlpoints(10,1); UserData.controlpoints(11,1)], ... 
            'YData',[UserData.controlpoints(10,2); UserData.controlpoints(11,2)]);
        set(UserData.linehdl(8), ...
            'XData',[UserData.controlpoints(11,1); UserData.controlpoints(5,1)], ... 
            'YData',[UserData.controlpoints(11,2); UserData.controlpoints(5,2)]);
        set(UserData.linehdl(9), ...
            'XData',[UserData.controlpoints(5,1); UserData.controlpoints(6,1)], ... 
            'YData',[UserData.controlpoints(5,2); UserData.controlpoints(6,2)]);
        set(UserData.linehdl(10), ...
            'XData',[UserData.controlpoints(6,1); UserData.controlpoints(12,1)], ... 
            'YData',[UserData.controlpoints(6,2); UserData.controlpoints(12,2)]);
        set(UserData.linehdl(11), ...
            'XData',[UserData.controlpoints(12,1); UserData.controlpoints(7,1)], ... 
            'YData',[UserData.controlpoints(12,2); UserData.controlpoints(7,2)]);
        set(UserData.linehdl(12), ...
            'XData',[UserData.controlpoints(7,1); UserData.controlpoints(1,1)], ... 
            'YData',[UserData.controlpoints(7,2); UserData.controlpoints(1,2)]);
        UserData.lastxy = newxy;
    end
    % copy UserData back to main
    set(obj,'UserData',UserData);
end % end callback mousedrag

%----------------------------------------------------------------------
function xy = getxycursorpos(obj)
% query the figure to convert cursor position in the figure 
% window to [x y] coordinates in the coordinate frame of the
% plot axes
    cp = get(get(obj,'CurrentAxes'),'CurrentPoint');
    xy(1) = cp(1,1);
    xy(2) = cp(1,2);
end % end subfunction getxycursorpos

%----------------------------------------------------------------------
function interceptkeypress(obj,eventdata)
    % grab a local copy of UserData
    UserData = get(obj,'UserData');
    keypress = get(obj,'CurrentCharacter');
    if strcmp(keypress,' ')
        UserData.finished = 1; 
    end
    % copy UserData back to main
    set(obj,'UserData',UserData);
end % end callback interceptkeypress
