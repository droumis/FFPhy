
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Set these values by hand
path_prefix = '/data14/smkim';
subjects = {'S48','S58','S59','S60','S61'};
% which hemisphere has the better theta reference? we pick one to determine
% theta state, because changes in state are tightly correlated across
% hemispheres
hemisphere = {'left','left','left','right','left'};

TS_PER_SEC = 1e4;

% 5 decibel ratio (mean PSD in theta band):(mean PSD in above-theta band)
% theta is 5-10 Hz, nontheta is 10-25 Hz (we avoid delta-band frequencies
% because of movement artifact durig runs)
theta_frequency_band = [5 10];
background_frequency_band = [10 25];
threshold = 5; 
% resolve theta intervals with 10 ms resolution
discretization_timestep = uint32(100);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

theta_state = [];

for s = 1:numel(subjects)
  load(sprintf('%s/%s/%s_session.mat', ...
      path_prefix,subjects{s},subjects{s}));

  fileslist = dir(sprintf('%s/%s/continuous/%s_*_lfp_spectra_lowfrequency.mat', ...
      path_prefix,subjects{s},subjects{s}));
  for i = 1:numel(fileslist)
    load(sprintf('%s/%s/continuous/%s', ...
        path_prefix,subjects{s},fileslist(i).name));

    % pick the spectra for the desired theta reference
    lfp_spectra = lfp_spectra(strcmp(hemisphere{s},{lfp_spectra(:).hemisphere}));
    assert(isscalar(lfp_spectra));

    % compute mean PSD in selected frequency bands
    theta_idx = find(ismember_intervals(lfp_spectra.frequency, ...
        theta_frequency_band));
    background_idx = find(ismember_intervals(lfp_spectra.frequency, ...
        background_frequency_band));
    % log ratio of mean PSD
    r = db( ...
        mean(lfp_spectra.normalized_spectral_density(:,theta_idx),2) ./ ...
        mean(lfp_spectra.normalized_spectral_density(:,background_idx),2), ...
        'power');

    % extrapolate timestamps to get coverage at start and end of session
    k = find(struct_cmp(lfp_spectra,session, ...
        {'subject','day','epoch','environment'}));
    assert(isscalar(k));
    overall_timerange = session(k).timerange;

    t = [ overall_timerange(1); lfp_spectra.timestamp; ...
        overall_timerange(2) ];
    r = [ interp1(double(lfp_spectra.timestamp),r, ...
        double(t(1)),'nearest','extrap'); ...
        r; ...
        interp1(double(lfp_spectra.timestamp),r, ...
        double(t(end)),'nearest','extrap') ];
    assert(~any(isnan(r)));

    theta_intervals = find_intervals(t,r, ...
        @(arg) arg > threshold,discretization_timestep);

    % Join intervals that are closer than a fractional-window step size
    minimum_gap = (1 - lfp_spectra.window_overlap) * ...
        diff(lfp_spectra.window_size);
    theta_intervals = join_intervals(theta_intervals, ...
        uint32(TS_PER_SEC * minimum_gap));

    % Remove snippets that are shorter than a window length
    minimum_duration = diff(lfp_spectra(1).window_size);
    theta_intervals(double(theta_intervals(:,2) - ...
        theta_intervals(:,1))/TS_PER_SEC < minimum_duration,:) = [];

    theta_state = [ theta_state; struct( ...
        'subject'             , lfp_spectra.subject, ...
        'day'                 , lfp_spectra.day, ...
        'epoch'               , lfp_spectra.epoch, ...
        'environment'         , lfp_spectra.environment, ...   
        'region'              , lfp_spectra.region, ...
        'hemisphere'          , lfp_spectra.hemisphere, ...
        'depth'               , lfp_spectra.depth, ...
        'electrode'           , lfp_spectra.electrode, ...
        'channel'             , lfp_spectra.channel, ...
        'reference'           , lfp_spectra.reference, ...
        'Fs'                  , lfp_spectra.Fs, ...
        'prewhitening_filter' , lfp_spectra.prewhitening_filter, ...
        'window_size'         , lfp_spectra.window_size, ...
        'window_overlap'      , lfp_spectra.window_overlap, ...
        'TW'                  , lfp_spectra.TW, ...
        'num_tapers'          , lfp_spectra.num_tapers, ...
        'theta_frequency_band', theta_frequency_band, ...
        'background_frequency_band' , background_frequency_band, ...
        'normalized_power_ratio_criterion'  , threshold, ...
        'discretization_timestep' , discretization_timestep, ...
        'minimum_gap'         , minimum_gap, ...
        'minimum_duration'    , minimum_duration, ...
        'timerange'           , theta_intervals) ];

  end
end

save('/data14/smkim/theta_state.mat','theta_state');



