// generated by Fast Light User Interface Designer (fluid) version 1.0105

#include "GUIMain.h"
#include "eventListeners.h"
#include "ModelVis.h"

inline void GUIMain::cb_playButton_i(Fl_Button*, void*) {
  mcontrol->play();
}
void GUIMain::cb_playButton(Fl_Button* o, void* v) {
  ((GUIMain*)(o->parent()->parent()->user_data()))->cb_playButton_i(o,v);
}

inline void GUIMain::cb_stopButton_i(Fl_Button*, void*) {
  mcontrol->stop();
}
void GUIMain::cb_stopButton(Fl_Button* o, void* v) {
  ((GUIMain*)(o->parent()->parent()->user_data()))->cb_stopButton_i(o,v);
}

inline void GUIMain::cb_pauseButton_i(Fl_Button*, void*) {
  mcontrol->pause();
}
void GUIMain::cb_pauseButton(Fl_Button* o, void* v) {
  ((GUIMain*)(o->parent()->parent()->user_data()))->cb_pauseButton_i(o,v);
}

inline void GUIMain::cb_ffButton_i(Fl_Button*, void*) {
  mcontrol->ff();
}
void GUIMain::cb_ffButton(Fl_Button* o, void* v) {
  ((GUIMain*)(o->parent()->parent()->user_data()))->cb_ffButton_i(o,v);
}

inline void GUIMain::cb_rewButton_i(Fl_Button*, void*) {
  mcontrol->rew();
}
void GUIMain::cb_rewButton(Fl_Button* o, void* v) {
  ((GUIMain*)(o->parent()->parent()->user_data()))->cb_rewButton_i(o,v);
}

inline void GUIMain::cb_dumpFramesCheckbox_i(Fl_Check_Button* o, void*) {
  mcontrol->setDumpFrames(o->value());
}
void GUIMain::cb_dumpFramesCheckbox(Fl_Check_Button* o, void* v) {
  ((GUIMain*)(o->parent()->parent()->user_data()))->cb_dumpFramesCheckbox_i(o,v);
}

inline void GUIMain::cb_mTimeSlider_i(Fl_Slider* o, void*) {
  mcontrol->setMTime((int)o->value());
}
void GUIMain::cb_mTimeSlider(Fl_Slider* o, void* v) {
  ((GUIMain*)(o->parent()->parent()->user_data()))->cb_mTimeSlider_i(o,v);
}

inline void GUIMain::cb_mesh_i(Fl_Value_Input* o, void*) {
  mcontrol->openSpecialWindow((int)(o->value()));
}
void GUIMain::cb_mesh(Fl_Value_Input* o, void* v) {
  ((GUIMain*)(o->parent()->parent()->user_data()))->cb_mesh_i(o,v);
}

GUIMain::GUIMain() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = mainWindow = new Fl_Double_Window(1010, 830, "afvis");
    w = o;
    o->box(FL_UP_BOX);
    o->color(FL_FOREGROUND_COLOR);
    o->labelsize(12);
    o->user_data((void*)(this));
    { Fl_Group* o = MainView = new Fl_Group(5, 5, 1000, 750);
      { Fl_Box* o = cframe = new Fl_Box(5, 5, 1000, 750);
        o->box(FL_DOWN_FRAME);
        o->color((Fl_Color)4);
        o->selection_color((Fl_Color)69);
      }
      { MovieControl* o = mcontrol = new MovieControl(5, 5, 1000, 750, "mcontrol");
        o->box(FL_NO_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BLACK);
        o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        o->when(FL_WHEN_RELEASE);
      }
      o->end();
    }
    { Fl_Group* o = Playback = new Fl_Group(5, 760, 1004, 65);
      { Fl_Button* o = playButton = new Fl_Button(150, 790, 45, 20, "@>");
        o->down_box(FL_DOWN_BOX);
        o->selection_color(FL_GREEN);
        o->callback((Fl_Callback*)cb_playButton);
      }
      { Fl_Button* o = stopButton = new Fl_Button(25, 790, 40, 20, "@square");
        o->down_box(FL_DOWN_BOX);
        o->selection_color((Fl_Color)1);
        o->callback((Fl_Callback*)cb_stopButton);
      }
      { Fl_Button* o = pauseButton = new Fl_Button(110, 790, 40, 20, "@||");
        o->down_box(FL_DOWN_BOX);
        o->selection_color(FL_YELLOW);
        o->callback((Fl_Callback*)cb_pauseButton);
      }
      { Fl_Button* o = ffButton = new Fl_Button(195, 790, 45, 20, "@>>");
        o->down_box(FL_DOWN_BOX);
        o->selection_color(FL_GREEN);
        o->callback((Fl_Callback*)cb_ffButton);
      }
      { Fl_Button* o = rewButton = new Fl_Button(65, 790, 45, 20, "@<<");
        o->down_box(FL_DOWN_BOX);
        o->selection_color(FL_GREEN);
        o->callback((Fl_Callback*)cb_rewButton);
      }
      { Fl_Check_Button* o = dumpFramesCheckbox = new Fl_Check_Button(980, 790, 20, 20, "frame dump");
        o->tooltip("save frames to files");
        o->down_box(FL_DOWN_BOX);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->callback((Fl_Callback*)cb_dumpFramesCheckbox);
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Slider* o = mTimeSlider = new Fl_Slider(5, 760, 1000, 20);
        o->type(5);
        o->callback((Fl_Callback*)cb_mTimeSlider);
      }
      o->end();
    }
    { Fl_Group* o = MeshSelectors = new Fl_Group(275, 784, 292, 53);
      { Fl_Button* o = new Fl_Button(370, 790, 155, 30, "traj. tracking mesh");
        o->labelcolor(FL_FOREGROUND_COLOR);
      }
      { Fl_Value_Input* o = new Fl_Value_Input(325, 790, 40, 30, "mesh");
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->callback((Fl_Callback*)cb_mesh);
        o->when(FL_WHEN_ENTER_KEY_ALWAYS);
      }
      o->end();
    }
    o->end();
    o->resizable(o);
  }
}

void GUIMain::show(int argc, char **argv) {
  mainWindow->show(argc, argv);
}

void GUIMain::show() {
  mainWindow->show();
}

void GUIMain::setModel(ModelVis *model) {
  mcontrol->setModel(model);
    mTimeSlider->minimum(mcontrol->getMTimeMin());
    mTimeSlider->maximum(mcontrol->getMTimeMax());
    model->getEventHandler()->addMTimeEventListener(this);
}

void GUIMain::mTimeEventHandle() {
  mTimeSlider->value(mcontrol->getMTime());
}

void GUIMain::setMexInput(const mxArray *opts) {
  mcontrol->setMexInput(opts);
}
