function bool = is_recording_sites(recording_sites)
%IS_RECORDING_SITES Validate whether the input is a recording sites struct array
%
%   IS_RECORDING_SITES(RECORDING_SITES) returns true if RECORDING_SITES is a
%   struct array that contains a valid listing of electrode recording sites.
%   
%   See also READ_RECORDING_SITES, written by smk.
%
%Written by SMK 2009 June 22.
%

REQUIRED_FIELDS = { ...
    'subject'   , ...
    'day'       , ...
    'electrode' , ...
    'hemisphere', ...
    'region'    , ...
    'source'    };

if isempty(recording_sites) && isstruct(recording_sites) && ...
    all(isfield(recording_sites,REQUIRED_FIELDS))
  warning('RECORDING_SITES struct is empty');
  bool = true;

elseif ~isstruct(recording_sites) || ...
    ~all(isfield(recording_sites,REQUIRED_FIELDS))
  warning('missing required field(s)');
  bool = false;

elseif ~iscellstr({recording_sites(:).subject}) || ...
    ~all(strcmp({recording_sites(:).subject}, ...
    regexp({recording_sites(:).subject},'[a-zA-Z0-9]*','match','once')))
  warning(['subject field must be a string containing characters ' ...
      '[a-zA-Z0-9]']);
  bool = false;

elseif ~all(cellfun(@isnumeric,{recording_sites(:).day})) || ...
    ~all(cellfun(@isscalar,{recording_sites(:).day})) || ...
    ~all(cellfun(@isreal,{recording_sites(:).day})) || ...
    ~all(cellfun(@isfinite,{recording_sites(:).day})) || ...
    ~all(cellfun(@(c) (c >= 0),{recording_sites(:).day})) || ...
    ~all(cellfun(@(c) (round(c) == c),{recording_sites(:).day}))
  warning('day field must be a real non-negative integer scalar');
  bool = false;

elseif ~all(cellfun(@isnumeric,{recording_sites(:).electrode})) || ...
    ~all(cellfun(@isscalar,{recording_sites(:).electrode})) || ...
    ~all(cellfun(@isreal,{recording_sites(:).electrode})) || ...
    ~all(cellfun(@isfinite,{recording_sites(:).electrode})) || ...
    ~all(cellfun(@(c) (c > 0),{recording_sites(:).electrode})) || ...
    ~all(cellfun(@(c) (round(c) == c),{recording_sites(:).electrode}))
  warning('electrode field must be a real positive integer scalar');
  bool = false;

elseif ~iscellstr({recording_sites(:).hemisphere}) || ...
    ~all(strcmp({recording_sites(:).hemisphere}, ...
    regexp({recording_sites(:).hemisphere},'[a-zA-Z0-9_]*','match','once')))
  warning(['hemisphere field must be a string containing characters ' ...
      '[a-zA-Z0-9_]']);
  bool = false;

elseif ~iscellstr({recording_sites(:).region}) || ...
    any(cellfun(@isempty,{recording_sites(:).region}))
  warning(['region field must be a non-empty string']);
  bool = false;

elseif ~iscellstr({recording_sites(:).source}) || ...
    ~all(cellfun(@(c) (exist(c) == 2),{recording_sites(:).source})) || ...
    ~all(cellfun(@(c) isdir(fileparts(c)), {recording_sites(:).source}))
  warning(['source field must be a string that specifies a filename, ' ...
      'including path']);
  bool = false;

else
  [i1, i2] = ndgrid(1:numel(recording_sites));
  pair_idx = find(i1 ~= i2);
  i1 = i1(pair_idx);
  i2 = i2(pair_idx);
  % Check that no two elements of recording_sites duplicate the same
  % (subject, day, electrode, channel) 3-tuple
  if any(arrayfun(@(s1,s2) isequal( ...
      {s1.subject, s1.day, s1.electrode}, ...
      {s2.subject, s2.day, s2.electrode}), ...
      recording_sites(i1),recording_sites(i2)))
    bool = false;
  else
    bool = true;
  end

end

