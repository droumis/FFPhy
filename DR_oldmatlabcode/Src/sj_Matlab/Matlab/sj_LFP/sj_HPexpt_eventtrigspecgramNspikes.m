function [params] = sj_HPexpt_eventtrigspecgramNspikes(prefix, day, epochs, tet, trigtype, riptet, do_wrtgnd, dospeed, figopt,spiketets,varargin)
% Shantanu - Nov 2012. Plot spikes aligned to events with defined spectrograms
% For isolating potential "noise" events and plotting spikes aligned to them
% From sj_HPexpt_eventtrigspecgramNspikes and sj_HPexpt_eventtrigspecgram_lowfreq
%
% Get and plot ripple trig spec - Zscore using output generated by sj_HPexpt_baselinespecgram
% From Kenny and Maggies - event_spectrograms .m and calcriptriggerredspectrograms.m respectively
% ADAPT TO DO Other Triggers as well

% sj_HPexpt_eventtrigspecgramNspikes('HPb', 1, [4 6], 9,'rip', 4, 1,[],1,[4 9],'fpass',[0 400]);


if nargin<1,
    keyboard
    error('Please enter Expt Prefix and Day No!');
end
if nargin<2,
    keyboard
    error('Please enter Day No!');
end
if nargin<3,
    epochs=1; %% Epochs
end
if nargin<4,
    tet=1; %
end
if trigtype<5,
    trigtype='rip'; %
end
if nargin<6,
    riptet=4; % Have to start using getripples to look at ripples across multiple tetrodes!
end
if nargin<7,
    do_wrtgnd=1; % Whether to also do with respect to ground
end
if nargin<8,
    dospeed=0; %
end
if nargin<8,
    figopt=0; %
end
if nargin<9,
    spiketets = [4 9]; % First is Hp and 2nd is PFC
end
saveg1=0;


do_random = 0; % To align to random triggers

% To look at response in "noise" band for PFC tetrode
figind=0; % Individual spectrogram figures


% Define Chronux params
% -------------------------------------------
win = [0.5 0.5]; % Window around triggering events / ripples. Change below acording to trigger type
movingwin = [100 10]/1000; cwin = movingwin;
params.Fs = 1500;
params.fpass = [0 400];
%params.trialave = 0; % This is 0 by default
params.tapers = [3 5]; % Should I put this in or let it use default tapers
params.err = [2 0.05];

% Speed parameters
lowsp_thrs = 2; % cm/sec
highsp_thrs = 7; % cm/sec

% Sleep
if ismember(epochs,[1 3 5 7]),
    lowsp_thrs = 0.5; %cm/sec
    highsp_thrs = 2; % cm/sec
end

%set variable options
for option = 1:2:length(varargin)-1
    switch varargin{option}
        case 'movingwin'
            movingwin = varargin{option+1};
        case 'fpass'
            params.fpass = varargin{option+1};
    end
end

if params.fpass(2) == 400
    savetag = '';
    movingwin = [100 10]/1000; cwin = movingwin;
end
if params.fpass(2) == 100
    savetag = 'mid';
    movingwin = [400 40]/1000; cwin = movingwin;
end
if params.fpass(2) == 40
    savetag = 'low';
    movingwin = [1000 100]/1000; cwin = movingwin;
end
if params.fpass(2) == 10
    savetag = 'floor';
    movingwin = [4000 400]/1000; 
end



smwin=4; % Smoothing along frequency  and/or time axis


% SET DATA
% -------------------------------------------

switch prefix
    case 'HPa'
        rawdir = '/data25/sjadhav/HPExpt/HPa/';
        directoryname = '/data25/sjadhav/HPExpt/HPa_direct/';
    case 'HPb'
        rawdir = '/data25/sjadhav/HPExpt/HPb/';
        directoryname = '/data25/sjadhav/HPExpt/HPb_direct/';
end
dir2=directoryname;

if (day<10)
    daystring = ['0',num2str(day)];
else
    daystring = num2str(day);
end

if (tet<10)
    tetstring = ['0',num2str(tet)];
else
    tetstring = num2str(tet);
end

% Spikefile
spikefile = sprintf('%s/%sspikes%02d.mat', directoryname, prefix, day);
if exist(spikefile)==2
    load(spikefile);
end
% For spiking
binsize = 10; % ms
pret=550; postt=550; %500 ms - trim ends later



S_all = []; Sgnd_all = [];
Smean_all=[]; Sgndmean_all=[];

cntrip = 0; % For spike histogram
cntkeep = 0;
for ep=1:length(epochs)
    
    epoch = epochs(ep);
    
    
    
    switch trigtype
        case 'rip'
     
            if params.fpass(2) == 400
                win = [0.5 0.5];
            else
                win = [2 2];
            end
            
            if params.fpass(2) == 10
                win = [8 8];
            end
            
            
            % Get Ripple Times - HAVE TO SWITCH TO USING getripples FOR LOOKING ACROSS MULTIPLE TETRODES
            % -------------------------------------------------------------------------------------------
            % SHOULD SWITCH THIS TO ALLTET. If alltet does not exist, then use given tet/tets.
            ripfile = sprintf('%s/%sripples%02d.mat', directoryname, prefix, day);
            load(ripfile);
            rip_starttime=[]; rip_sizes=[];
            for i=1:length(riptet)
                currriptet=riptet(i);
                rip_starttime = [rip_starttime; ripples{day}{epoch}{currriptet}.starttime];   % in sec
                rip_sizes = [rip_sizes; ripples{day}{epoch}{currriptet}.maxthresh];   % in units of std dev
            end
            
            %rem = find((rip_sizes<3) | (rip_sizes>4)); % [HPb: Day1 Low speed - Keep all. High speed - Keep above 4.5 sds]
            rem = find(rip_sizes<3);
            rip_starttime(rem) = [];
            rip_sizes(rem) = [];
            
            [rip_starttime,sortidx] = sort(rip_starttime);
            rip_sizes = rip_sizes(sortidx);
            % Define triggering events as the start of each ripple
            triggers = rip_starttime;
            
            % Implement speed criterion
            if ~isempty(dospeed)
                posfile = sprintf('%s/%spos%02d.mat', directoryname, prefix, day);
                load(posfile);
                absvel = abs(pos{day}{epoch}.data(:,5)); % Can also use field 9
                postime = pos{day}{epoch}.data(:,1); % in secs
            
                pidx = lookup(triggers,postime);
                speed_atrip = absvel(pidx);
                lowsp_idx = find(speed_atrip <= lowsp_thrs);
                highsp_idx = find(speed_atrip >= highsp_thrs);
                
                if strcmp(dospeed,'low')==1
                    triggers = triggers(lowsp_idx);
                end
                
                if strcmp(dospeed,'high')==1
                    triggers = triggers(highsp_idx);
                end 
            end
            
            % Get random triggers 
            % Time vector from starttime to endtime, but skip firat and lst few secs (say 5 seconds)
            time_st = ripples{day}{epoch}{currriptet}.timerange(1) + 5;
            time_end = ripples{day}{epoch}{currriptet}.timerange(2) - 5;
            rip_timeax = time_st:(1/params.Fs):time_end;
            pickidx = randperm(length(rip_timeax));
            triggers_rand = rip_timeax(pickidx(1:length(triggers))); % Random events of length triggers
            %triggers_rand = rip_timeax(pickidx(1:1000)); % x random events
            clear rip_timax pickidx            
            
         case 'spin'
     
            if params.fpass(2) == 400
                win = [2 2];
            else
                win = [2 4];
            end
            
            if params.fpass(2) == 10
                win = [8 8];
            end
             
            % Get Spindle Times - HAVE TO SWITCH TO USING getripples FOR LOOKING ACROSS MULTIPLE TETRODES
            % -------------------------------------------------------------------------------------------
            % SHOULD SWITCH THIS TO ALLTET. If alltet does not exist, then use given tet/tets.
            spintet = riptet;
            spinfile = sprintf('%s/%sspindles%02d.mat', directoryname, prefix, day);
            load(spinfile);
            spin_starttime=[]; spin_sizes=[];
            for i=1:length(spintet)
                currspintet=spintet(i);
                spin_starttime = [spin_starttime; spindles{day}{epoch}{currspintet}.starttime];   % in sec
                spin_sizes = [spin_sizes; spindles{day}{epoch}{currspintet}.maxthresh];   % in units of std dev
            end
            
            %rem = find((spin_sizes<3) | (spin_sizes>4));
            rem = find(spin_sizes<3);
            spin_starttime(rem) = [];
            spin_sizes(rem) = [];
            
            [spin_starttime,sortidx] = sort(spin_starttime);
            spin_sizes = spin_sizes(sortidx);
            % Define triggering events as the start of each spinple
            triggers = spin_starttime;
            
            % Implement speed criterion
            if ~isempty(dospeed)
                posfile = sprintf('%s/%spos%02d.mat', directoryname, prefix, day);
                load(posfile);
                absvel = abs(pos{day}{epoch}.data(:,5)); % Can also use field 9
                postime = pos{day}{epoch}.data(:,1); % in secs
            
                pidx = lookup(triggers,postime);
                speed_atspin = absvel(pidx);
                lowsp_idx = find(speed_atspin <= lowsp_thrs);
                highsp_idx = find(speed_atspin >= highsp_thrs);
                
                if strcmp(dospeed,'low')==1
                    triggers = triggers(lowsp_idx);
                end
                
                if strcmp(dospeed,'high')==1
                    triggers = triggers(highsp_idx);
                end 
            end
            
            % Get random triggers 
            % Time vector from starttime to endtime, but skip firat and lst few secs (say 5 seconds)
            time_st = spindles{day}{epoch}{currspintet}.timerange(1) + 5;
            time_end = spindles{day}{epoch}{currspintet}.timerange(2) - 5;
            spin_timeax = time_st:(1/params.Fs):time_end;
            pickidx = randperm(length(spin_timeax));
            triggers_rand = spin_timeax(pickidx(1:length(triggers))); % Random events of length triggers
            %triggers_rand = spin_timeax(pickidx(1:1000)); % x random events
            clear spin_timax pickidx            
            
        case 'rew'
            
            % Load reward file
            % ---------------------------------
            rewfile = sprintf('%s/%srewardinfo%02d.mat', directoryname, prefix, day);
            load(rewfile);
            currrewinfo = rewardinfo{day}{epoch};
            useidx=2;
            currrewinfo(:,2) = currrewinfo(:,2)./10000; % secs
            allrewidx = find(currrewinfo(:,3)==1); allrewtime = currrewinfo(allrewidx,useidx);
            triggers = allrewtime;
            
        case 'norew'
            
            % Load reward file
            % ---------------------------------
            rewfile = sprintf('%s/%srewardinfo%02d.mat', directoryname, prefix, day);
            load(rewfile);
            currrewinfo = rewardinfo{day}{epoch};
            useidx=2;
            currrewinfo(:,2) = currrewinfo(:,2)./10000; % secs
            allnorewidx = find(currrewinfo(:,3)==0); allnorewtime = currrewinfo(allnorewidx,useidx);
            triggers = allnorewtime;
            
    end % end switch
    
    
    
    % Get the Baseline Spectrogram values
    % -----------------------------------
    cd([directoryname,'/EEGSpec/']);
    eegspecfile = [dir2,'/EEGSpec/',prefix,'eegspec',savetag,daystring,'-Tet',tetstring];
    load(eegspecfile);
    % Data
    %spec = eegspec{day}{epoch}{tet}.specgram;
    meanspec = eegspec{day}{epoch}{tet}.meanspec;
    stdspec = eegspec{day}{epoch}{tet}.stdspec;
    % Mean and std for whole day
    %lastepoch = length(eegspec{day});
    meandayspec = eegspec{day}{1}{tet}.meandayspec; % Stored in first epoch
    stddayspec = eegspec{day}{1}{tet}.stddayspec;
    %clear spec
    
    % Now get EEG for the given tet and process
    % --------------------------------------
    
    cd([directoryname,'/EEG/']);
    curreegfile = [dir2,'/EEG/',prefix,'eeg',daystring,'-',num2str(epoch),'-',tetstring];
    load(curreegfile);
    lfp = eeg{day}{epoch}{tet}.data;
    starttime = eeg{day}{epoch}{tet}.starttime; % This is in secs
    endtime = starttime + (length(lfp)-1) * (1 / params.Fs);
    clear eeg
    
    % Update triggers
    % -----------------
    % Subtract startime of epoch to get this with start at 0.
    % You only input eeg vector to mtspecgram, which starts at index 1
    triggers = triggers-starttime; endtime = endtime - starttime;
    if do_random ==1, triggers_rand = triggers_rand-starttime; end
    
    
    
    
    %Remove triggering events that are too close to the beginning or end
    while triggers(1)<win(1)
        triggers(1) = [];
    end    
    rem = find(triggers + win(2) > endtime);
    triggers(rem) = [];
%     while triggers(end)> endtime-win(2)
%         triggers(end) = [];
%     end
%     triggers(end)=[];
    
    % Calculate event triggered spectrogram
    % -----------------------------------
    disp(['Doing event-triggered specgram. Ntriggers = ',num2str(length(triggers))]);
    [S,Stime,Sfreq] = mtspecgramtrigc(lfp,triggers,[win(1) win(2)],[cwin(1) cwin(2)],params);
    Stime = Stime - win(1); % This will make time start -win(1) instead of 0
    % Alternatively
    %--------------
    % Can cut eeg in windows around triggers and build up a matrix, and then do specgram for
    % each cut piece separately. See event_spectrogram.m from kkay for an example
    if do_random==1
        [S_rand] = mtspecgramtrigc(lfp,triggers_rand,[win(1) win(2)],[cwin(1) cwin(2)],params);
    end
    clear lfp    
    
    
    % Z-score the event-triggered  spectrogram using data from continuous spectrogram
    % ------------------------------------------------------------------------------
    %S = bsxfun(@minus,S,meanspec(1:size(S,2))); % Can use meandayspec and stddayspec instead
    %S = bsxfun(@rdivide,S,stdspec(1:size(S,2)));
    Smean = mean(S,3); % mean across events
    %S_all = [S_all;S];  
    Smean_all(:,:,ep) = Smean;
    if do_random==1
        S_rand = bsxfun(@minus,S_rand,meanspec(1:size(S,2))); S_rand = bsxfun(@rdivide,S_rand,stdspec(1:size(S,2)));
        Smean_rand = mean(S_rand,3);
        %S_all = [S_all;S];
        Smean_all_rand(:,:,ep) = Smean_rand;
    end
    
    % Alternative way
    % for i = 1:size(S,1)
    %     for j = 1:size(S,3)
    %     	S(i,:,j) = (S(i,:,j) - meanspec)./stdspec;
    %     end
    % end
    
    
    % To look at response in "noise" band for PFC tetrode
    fidx = find(Sfreq>=150 & Sfreq<=350);
    tidx = find(Stime>=-0.1 & Stime<=0.3);
    pretidx = find(Stime>=-0.4 & Stime<=-0.2);
    
    % Do EEG wrt Gnd if asked for
    % ---------------------------
    
    if do_wrtgnd==1
        eeggndspecfile = [dir2,'/EEGSpec/',prefix,'eeggndspec',savetag,daystring,'-Tet',tetstring];
        if (exist([eeggndspecfile,'.mat'],'file'))~=2
            disp(['EEG wrt Gnd file seems to not exist']);
            gndflag=0;
        else
            gndflag=1;
            load(eeggndspecfile);
            % Data
            %spec = eeggndspec{day}{epoch}{tet}.specgram;
            meanspecgnd = eeggndspec{day}{epoch}{tet}.meanspec;
            stdspecgnd = eeggndspec{day}{epoch}{tet}.stdspec;
            % Mean and std for whole day
            %lastepoch = length(eegspec{day});
            meandayspecgnd = eeggndspec{day}{1}{tet}.meandayspec; % Stored in first epoch
            stddayspecgnd = eeggndspec{day}{1}{tet}.stddayspec;
            %clear spec
            
            % Specgram the event-triggered EEG
            curreeggndfile = [dir2,'/EEG/',prefix,'eeggnd',daystring,'-',num2str(epoch),'-',tetstring];
            load(curreeggndfile);
            lfpgnd = eeggnd{day}{epoch}{tet}.data;
            disp(['Doing event-triggered specgram for eeg wrt gnd']);
            [Sgnd] = mtspecgramtrigc(lfpgnd,triggers,[win(1) win(2)],[cwin(1) cwin(2)],params);
            if do_random==1
                [Sgnd_rand] = mtspecgramtrigc(lfpgnd,triggers_rand,[win(1) win(2)],[cwin(1) cwin(2)],params);
            end
            clear lfpgnd
            
            % Z-score
            Sgnd = bsxfun(@minus,Sgnd,meanspecgnd(1:size(S,2))); % Can use meandayspec and stddayspec instead
            Sgnd = bsxfun(@rdivide,Sgnd,stdspecgnd(1:size(S,2)));
            Sgndmean = mean(Sgnd,3);
            
            %Sgnd_all = [Sgnd_all;Sgnd];
            Sgndmean_all(:,:,ep) = Sgndmean;
            if do_random==1
                Sgnd_rand = bsxfun(@minus,Sgnd_rand,meanspecgnd(1:size(S,2))); Sgnd_rand = bsxfun(@rdivide,Sgnd_rand,stdspecgnd(1:size(S,2)));
                Sgndmean_rand = mean(Sgnd_rand,3);
                %S_all = [S_all;S];
                Sgndmean_all_rand(:,:,ep) = Sgndmean_rand;
            end
            
            % Check the response in the "noise" band for PFC tetrodes, and accumulate triggers
            Sspike = [];
            trigspike = [];
            triggers_ori = triggers + starttime; % Get original times for spikes
            % What is response of in the mean spectrogram
            Srespm = Sgndmean(tidx,fidx); Srespm = mean(mean(Srespm));
            Sprem = Sgndmean(pretidx,fidx); Sprem = mean(mean(Sprem));
                
            noise_idx = [];
            keep_idx = [];
            
            for ind = 1:size(Sgnd,3)           
                % Now for individual spectrograms
                Sresp = Sgnd(tidx,fidx,ind); Sresp = mean(mean(Sresp));
                Spre = Sgnd(pretidx,fidx,ind); Spre = mean(mean(Spre));
                Scurr = Sgnd(:,:,ind);
                % For long term storage
                Sspike_allepochs(:,:,ep,ind) = Scurr;
                
                % See if Sresp for this trigger passes threshold
                % Eg Use large window, ~300ms, and remove if Sresp>2*Spre and Sresp>0.5
                % OR Sresp = -0.1 to 0.3 and Spre = -0.4 to -0.2, Condition Sresp>2*Spre and Sresp > 1
                
                %if (Sresp > Spre) & (Sresp > 0.8*Srespm)
                %if (Sresp > 1.5*Spre) && (Sresp > 0.5)
                %if (Sresp > 2*Spre) && (Sresp > 1)    
                if (Sresp > 1) && (Sresp > 2*Spre)
                %if (Spre > 0.4) || (Sresp > 0.4)    
                    trigspike = [trigspike; triggers_ori(ind)];
                    Sspike(:,:,ind) = Scurr;
                    noise_idx = [noise_idx;ind];
                else
                    keep_idx = [keep_idx;ind];
                end
         
                if figind==1
                    figure; hold on;
                    set(gcf,'Position',[55 660 560 420]);
                    imagesc(Stime,Sfreq,Scurr'); colorbar;
                    title(['Tet ',num2str(tet),' Specgram aligned to ',trigtype],'FontSize',18,'Fontweight','normal');
                    ylabel('Freq','FontSize',20,'Fontweight','normal');
                    xlabel('Time(s)','FontSize',20,'Fontweight','normal');
                    set(gca,'XLim',[min(Stime) max(Stime)]);
                    set(gca,'YLim',[min(Sfreq) max(Sfreq)]);
                    % Plot Line at 0 ms - Start of ripple
                    ypts = Sfreq;
                    xpts = 0*ones(size(ypts));
                    plot(xpts , ypts, 'k--','Linewidth',3);        
                    % Plot lines at 100ms
                    xpts = (100)*ones(size(ypts));
                    plot(xpts , ypts, 'k--','Linewidth',2);
                    
                    keyboard;
                end
            end
            
            Sspikemean = mean(Sspike,3); % For current epoch - mean across all individual events
            Sspikemean_all(:,:,ep) = Sspikemean;
            
            % Also get specgram for keep indexes
            Skeep = Sgnd(:,:,keep_idx);
            Skeepmean = mean(Skeep,3); % For current epoch - mean across all individual events
            Skeepmean_all(:,:,ep) = Skeepmean;
            
            
            % Do the spiking right away in this epoch
            spikeu_Hp = []; spikeu_PFC = [];
            % Hp tet
            tet = spiketets(1); nHpcells = 0;
            for i=1:length(spikes{day}{epoch}{tet})
                if ~isempty(spikes{day}{epoch}{tet}{i})
                    if ~isempty(spikes{day}{epoch}{tet}{i}.data)
                        cmd=sprintf('spike%d = spikes{day}{epoch}{tet}{%d}.data(:,1)*1000;',i,i); eval(cmd);
                        cmd=sprintf('spikeu_Hp = [spikeu_Hp;spike%d];',i); eval(cmd);
                        nHpcells=nHpcells+1;
                    end
                end
            end
            
            % PFC tet
            tet = spiketets(2); nPFCcells = 0;
            for i=1:length(spikes{day}{epoch}{tet})
                if ~isempty(spikes{day}{epoch}{tet}{i})
                    if ~isempty(spikes{day}{epoch}{tet}{i}.data)
                        cmd=sprintf('spike%d = spikes{day}{epoch}{tet}{%d}.data(:,1)*1000;',i,i); eval(cmd);
                        cmd=sprintf('spikeu_PFC = [spikeu_PFC;spike%d];',i); eval(cmd);
                        nPFCcells=nPFCcells+1;
                    end
                end
            end
            
            % align spikes to triggers
            trigspike_ms = trigspike*1000; % in ms
            for i=1:length(trigspike_ms)
                cntrip = cntrip+1; % This will continue across epochs 
                currrip = trigspike_ms(i);
                % Hp
                currspks =  spikeu_Hp(find( (spikeu_Hp>=(currrip-pret)) & (spikeu_Hp<=(currrip+postt)) ));
                currspks = currspks-(currrip);
                histspks = histc(currspks,[-pret:binsize:postt]);
                rip_spks_cell_Hp{cntrip}=currspks;
                rip_spkshist_cell_Hp(cntrip,:) = histspks;
                % Smooth over binsize*3 ms (30ms for 10ms; 15ms for 5 ms)
                % nstd = round(binsize*3/binsize); g1 = gaussian(nstd, 5*nstd+1);
                nstd = round(binsize*2/binsize); g1 = gaussian(nstd, 3*nstd+1);
                histspks = smoothvect(histspks, g1);
                rip_spkshist_cell_Hp(cntrip,:) = histspks;
                % PFC
                currspks =  spikeu_PFC(find( (spikeu_PFC>=(currrip-pret)) & (spikeu_PFC<=(currrip+postt)) ));
                currspks = currspks-(currrip);
                histspks = histc(currspks,[-pret:binsize:postt]);
                rip_spks_cell_PFC{cntrip}=currspks;
                rip_spkshist_cell_PFC(cntrip,:) = histspks;
                % Smooth over binsize*3 ms (30ms for 10ms; 15ms for 5 ms)
                % nstd = round(binsize*3/binsize); g1 = gaussian(nstd, 5*nstd+1);
                nstd = round(binsize*2/binsize); g1 = gaussian(nstd, 3*nstd+1);
                histspks = smoothvect(histspks, g1);
                rip_spkshist_cell_PFC(cntrip,:) = histspks;
            end
            
            % Also do it for the keep triggers
            trigspikek = triggers(keep_idx) + starttime;
            trigspikek_ms = trigspikek*1000; % in ms
            for i=1:length(trigspikek_ms)
                cntkeep = cntkeep+1; % This will continue across epochs 
                currrip = trigspikek_ms(i);
                % Hp
                currspks =  spikeu_Hp(find( (spikeu_Hp>=(currrip-pret)) & (spikeu_Hp<=(currrip+postt)) ));
                currspks = currspks-(currrip);
                histspks = histc(currspks,[-pret:binsize:postt]);
                rip_spks_cell_Hpk{cntkeep}=currspks;
                rip_spkshist_cell_Hpk(cntkeep,:) = histspks;
                % Smooth over binsize*3 ms (30ms for 10ms; 15ms for 5 ms)
                % nstd = round(binsize*3/binsize); g1 = gaussian(nstd, 5*nstd+1);
                nstd = round(binsize*2/binsize); g1 = gaussian(nstd, 3*nstd+1);
                histspks = smoothvect(histspks, g1);
                rip_spkshist_cell_Hpk(cntkeep,:) = histspks;
                % PFC
                currspks =  spikeu_PFC(find( (spikeu_PFC>=(currrip-pret)) & (spikeu_PFC<=(currrip+postt)) ));
                currspks = currspks-(currrip);
                histspks = histc(currspks,[-pret:binsize:postt]);
                rip_spks_cell_PFCk{cntkeep}=currspks;
                rip_spkshist_cell_PFCk(cntkeep,:) = histspks;
                % Smooth over binsize*3 ms (30ms for 10ms; 15ms for 5 ms)
                % nstd = round(binsize*3/binsize); g1 = gaussian(nstd, 5*nstd+1);
                nstd = round(binsize*2/binsize); g1 = gaussian(nstd, 3*nstd+1);
                histspks = smoothvect(histspks, g1);
                rip_spkshist_cell_PFCk(cntkeep,:) = histspks;
            end
            
            
            
        end % if exist eeggndfile
    end % if dognd==1
    
end % end epochs

if length(epochs) > 1
    Smean = mean(Smean_all,3); % Mean across epochs
    if gndflag==1
        Sgndmean = mean(Sgndmean_all,3); % Mean across epochs
    end
    if do_random==1
        Smean_rand = mean(Smean_all_rand,3); % Mean across epochs
        if gndflag==1
            Sgndmean_rand = mean(Sgndmean_all_rand,3); % Mean across epochs
        end
    end
    
    Sspikemean = mean(Sspikemean_all,3); % Mean across epochs
    Skeepmean = mean(Skeepmean_all,3); % Mean across epochs
    
end

%if strcmp(trigtype,'spin')
if params.fpass(2) ~= 400
    % Smoothing along freq axis
    for i=1:size(Smean,2)
        winst = i-smwin/2; winend = i+smwin/2;
        if winst<1, winst=1; end
        if winend>size(Smean,2), winend = size(Smean,2); end
        Smean(:,i) = mean(Smean(:,winst:winend),2);
        Sgndmean(:,i) = mean(Sgndmean(:,winst:winend),2);
    end
    
    % Smoothing along time axis
    for i=1:size(Smean,1)
        winst = i-smwin/2; winend = i+smwin/2;
        if winst<1, winst=1; end
        if winend>size(Smean,1), winend = size(Smean,1); end
        Smean(i,:) = mean(Smean(winst:winend,:),1);
        Sgndmean(i,:) = mean(Sgndmean(winst:winend,:),1);
    end
end




%% ------------------------------------------------
% PLOT
% -------------------------------------------------

if figopt ==1
    
    % ------------------------------
    % Figure and Font Sizes
    forppr = 1;
    % If yes, everything set to redimscreen_figforppr1
    % If not, everything set to redimscreen_figforppt1
    
    figdir = '/data25/sjadhav/';
    %figdir = '/data25/sjadhav/RippleInterruption/Figures/01AugSep11_RippleDisFigs/DisruptnCalibrationAndEgs/CalibrationEgs/';
    datadir = '/data25/sjadhav/';
    summdir = figdir;
    
    set(0,'defaultaxesfontweight','normal'); set(0,'defaultaxeslinewidth',2);
    if forppr==1
        set(0,'defaultaxesfontsize',16);
        tfont = 18; % title font
        xfont = 16;
        yfont = 16;
    else
        set(0,'defaultaxesfontsize',24);
        tfont = 28;
        xfont = 20;
        yfont = 20;
    end
    clr = {'b','r','g','c','m','y','k','r'};
    % ---------------------------------------
    
    
    
    %% Specgram EEG
    % -------------
    
    figure; hold on;
    set(gcf,'Position',[55 660 560 420]);
    imagesc(Stime,Sfreq,Smean'); colorbar;
    title(['Tet ',num2str(tet),' Specgram aligned to ',trigtype],'FontSize',18,'Fontweight','normal');
    ylabel('Freq','FontSize',20,'Fontweight','normal');
    xlabel('Time(s)','FontSize',20,'Fontweight','normal');
    set(gca,'XLim',[min(Stime) max(Stime)]);
    set(gca,'YLim',[min(Sfreq) max(Sfreq)]);
    
    % Plot Line at 0 ms - Start of ripple
    ypts = Sfreq;
    xpts = 0*ones(size(ypts));
    plot(xpts , ypts, 'k--','Linewidth',3);
    
    % Plot lines at 100ms
    xpts = (100)*ones(size(ypts));
    plot(xpts , ypts, 'k--','Linewidth',2);
    
    if saveg1==1,
        figfile = [figdir,prefix,'_Day',num2str(day),'_Tet',num2str(tetu),'_HpCellMatrix'];
        print('-dpdf', figfile);
        print('-djpeg', figfile);
        saveas(gcf,figfile,'fig');
    end
    
    %% Specgram EEG Gnd
    % ------------------
    
    if gndflag==1
        figure; hold on;
        set(gcf,'Position',[820 660 560 420])
        imagesc(Stime,Sfreq,Sgndmean'); colorbar; % USE SAME COLOR SCALE AS REAL-TRIGGER GRAPH
        title(['Tet ',num2str(tet),' Specgram wrt GND aligned to ', trigtype],'FontSize',18,'Fontweight','normal');
        ylabel('Freq','FontSize',20,'Fontweight','normal');
        xlabel('Time(s)','FontSize',20,'Fontweight','normal');
        set(gca,'XLim',[min(Stime) max(Stime)]);
        set(gca,'YLim',[min(Sfreq) max(Sfreq)]);
        
        % Plot Line at 0 ms - Start of ripple
        ypts = Sfreq;
        xpts = 0*ones(size(ypts));
        plot(xpts , ypts, 'k--','Linewidth',3);
        
        % Plot lines at 100ms
        xpts = (100)*ones(size(ypts));
        plot(xpts , ypts, 'k--','Linewidth',2);
        
        if saveg1==1,
            figfile = [figdir,prefix,'_Day',num2str(day),'_Tet',num2str(tetu),'_HpCellMatrix'];
            print('-dpdf', figfile);
            print('-djpeg', figfile);
            saveas(gcf,figfile,'fig');
        end
    end
    
    if do_random==1
        
        %% Specgram EEG Random
        % -----------------------
        
        figure; hold on;
        set(gcf,'Position',[55 140 560 420]);
        imagesc(Stime,Sfreq,Smean_rand',[min(Smean(:)) max(Smean(:))]); colorbar; % USE SAME COLOR SCALE AS REAL-TRIGGER GRAPH
        title(['Tet ',num2str(tet),' Specgram aligned to random events'],'FontSize',18,'Fontweight','normal');
        ylabel('Freq','FontSize',20,'Fontweight','normal');
        xlabel('Time(s)','FontSize',20,'Fontweight','normal');
        set(gca,'XLim',[min(Stime) max(Stime)]);
        set(gca,'YLim',[min(Sfreq) max(Sfreq)]);
        % Plot Line at 0 ms - Start of ripple
        ypts = Sfreq;
        xpts = 0*ones(size(ypts));
        plot(xpts , ypts, 'k--','Linewidth',3);
        % Plot lines at 100ms
        xpts = (100)*ones(size(ypts));
        plot(xpts , ypts, 'k--','Linewidth',2);
        if saveg1==1,
            figfile = [figdir,prefix,'_Day',num2str(day),'_Tet',num2str(tetu),'_HpCellMatrix'];
            print('-dpdf', figfile);
            print('-djpeg', figfile);
            saveas(gcf,figfile,'fig');
        end
        
        %% Specgram EEG Gnd Random
        % -----------------------
        
        if gndflag==1
            figure; hold on;
            set(gcf,'Position',[820 140 560 420]);
            imagesc(Stime,Sfreq,Sgndmean_rand',[min(Sgndmean(:)) max(Sgndmean(:))]); colorbar;
            title(['Tet ',num2str(tet),' Specgram GND aligned to random events'],'FontSize',18,'Fontweight','normal');
            ylabel('Freq','FontSize',20,'Fontweight','normal');
            xlabel('Time(s)','FontSize',20,'Fontweight','normal');
            set(gca,'XLim',[min(Stime) max(Stime)]);
            set(gca,'YLim',[min(Sfreq) max(Sfreq)]);
            % Plot Line at 0 ms - Start of ripple
            ypts = Sfreq;
            xpts = 0*ones(size(ypts));
            plot(xpts , ypts, 'k--','Linewidth',3);
            % Plot lines at 100ms
            xpts = (100)*ones(size(ypts));
            plot(xpts , ypts, 'k--','Linewidth',2);
            if saveg1==1,
                figfile = [figdir,prefix,'_Day',num2str(day),'_Tet',num2str(tetu),'_HpCellMatrix'];
                print('-dpdf', figfile);
                print('-djpeg', figfile);
                saveas(gcf,figfile,'fig');
            end
        end
        
    end % end do_random
    
    
end % end figopt


% Spectrogram and Spiking for selected triggers

% Plot the Specgram for Noise Idxs
figure; hold on;
set(gcf,'Position',[420 660 560 420]);
imagesc(Stime,Sfreq,Sspikemean'); colorbar;
title(['Tet ',num2str(tet),' Specgram aligned to Noiseidxs ',trigtype],'FontSize',18,'Fontweight','normal');
ylabel('Freq','FontSize',20,'Fontweight','normal');
xlabel('Time(s)','FontSize',20,'Fontweight','normal');
set(gca,'XLim',[min(Stime) max(Stime)]);
set(gca,'YLim',[min(Sfreq) max(Sfreq)]);
% Plot Line at 0 ms - Start of ripple
ypts = Sfreq;
xpts = 0*ones(size(ypts));
plot(xpts , ypts, 'k--','Linewidth',3);
% Plot lines at 100ms
xpts = (100)*ones(size(ypts));
plot(xpts , ypts, 'k--','Linewidth',2);

% Plot the Specgram for Keep Idxs
figure; hold on;
set(gcf,'Position',[420 660 560 420]);
imagesc(Stime,Sfreq,Skeepmean'); colorbar;
title(['Tet ',num2str(tet),' Specgram aligned to Keepidxs ',trigtype],'FontSize',18,'Fontweight','normal');
ylabel('Freq','FontSize',20,'Fontweight','normal');
xlabel('Time(s)','FontSize',20,'Fontweight','normal');
set(gca,'XLim',[min(Stime) max(Stime)]);
set(gca,'YLim',[min(Sfreq) max(Sfreq)]);
% Plot Line at 0 ms - Start of ripple
ypts = Sfreq;
xpts = 0*ones(size(ypts));
plot(xpts , ypts, 'k--','Linewidth',3);
% Plot lines at 100ms
xpts = (100)*ones(size(ypts));
plot(xpts , ypts, 'k--','Linewidth',2);


% SPIKING
% ---------------
pretp=500; posttp=500; % plotting x-axis for spiking
xaxis = -pret:binsize:postt; 
idx(1) = find(xaxis==-pretp); idx(2) = find(xaxis==posttp);
idxs = idx(1):idx(2);

% Sort by firing rate in 0 to 100 ms of Hp and smooth
timeaxis = -pret:binsize:postt; bins_center = find(abs(timeaxis)<=100);
bins_resp = find(timeaxis>=0 & timeaxis<=100);
% Noise
cellresp = sum(rip_spkshist_cell_Hp(:,bins_resp),2);
[~,cellsortidx] = sort(cellresp);
rip_spkshist_cell_Hp = rip_spkshist_cell_Hp(cellsortidx,:);%.*(1000/binsize);
rip_spkshist_cell_PFC = rip_spkshist_cell_PFC(cellsortidx,:);%.*(1000/binsize);

% smwin = 10;
% for i=1:size(rip_spkshist_cell_Hp,1)
%     winst = i-smwin/2; winend = i+smwin/2;
%     if winst<1, winst=1; end
%     if winend>size(rip_spkshist_cell_Hp,1), winend = size(rip_spkshist_cell_Hp,1); end
%     rip_spkshist_cell_Hp(i,:) = mean(rip_spkshist_cell_Hp(winst:winend,:));
%     rip_spkshist_cell_PFC(i,:) = mean(rip_spkshist_cell_PFC(winst:winend,:));
% end

% Keep
cellresp = sum(rip_spkshist_cell_Hpk(:,bins_resp),2);
[~,cellsortidx] = sort(cellresp);
rip_spkshist_cell_Hpk = rip_spkshist_cell_Hpk(cellsortidx,:);%.*(1000/binsize);
rip_spkshist_cell_PFCk = rip_spkshist_cell_PFCk(cellsortidx,:);%.*(1000/binsize);

% smwin = 20;
% for i=1:size(rip_spkshist_cell_Hpk,1)
%     winst = i-smwin/2; winend = i+smwin/2;
%     if winst<1, winst=1; end
%     if winend>size(rip_spkshist_cell_Hpk,1), winend = size(rip_spkshist_cell_Hpk,1); end
%     rip_spkshist_cell_Hpk(i,:) = mean(rip_spkshist_cell_Hpk(winst:winend,:));
%     rip_spkshist_cell_PFCk(i,:) = mean(rip_spkshist_cell_PFCk(winst:winend,:));
% end



% Spiking NOISE - Histograms have been accumulated across epochs
% Hp cell
figure; hold on;
set(gcf,'Position',[16 44 900 1045]);
subplot(4,1,[1 2]); hold on;
xaxis = -pret:binsize:postt; yaxis = 1:size(rip_spkshist_cell_Hp,1);
imagesc(xaxis,yaxis,flipud(rip_spkshist_cell_Hp));
title(['Hp CellComb Firing aligned to NOISE ripples-' num2str(binsize) 'ms bins'],...
    'FontSize',20,'Fontweight','normal');
set(gca,'XLim',[-pretp posttp]);
set(gca,'YLim',[0 size(rip_spkshist_cell_Hp,1)]);
ypts = 0:1:size(rip_spkshist_cell_Hp,1);
xpts = 0*ones(size(ypts));
% Plot Line at 0 ms - Onset of stimulation
plot(xpts , ypts, 'k--','Linewidth',3);
% Plot lines at 100ms 
xpts = 100*ones(size(ypts));
plot(xpts , ypts, 'k--','Linewidth',2);
subplot(4,1,[3 4]); hold on;
xaxis = -pret:binsize:postt;
plot(xaxis,mean(rip_spkshist_cell_Hp),'Linewidth',3);
set(gca,'XLim',[-pretp posttp]);
xlabel('Time(ms)','FontSize',20,'Fontweight','normal');
minp = min(mean(rip_spkshist_cell_Hp(:,idxs))); maxp = max(mean(rip_spkshist_cell_Hp(:,idxs)));
set(gca,'YLim',[minp-0.1 maxp+0.1]);
ypts = minp-0.1:0.1:maxp+0.1;
xpts = 0*ones(size(ypts));
% Plot Line at 0 ms - Onset of stimulation
plot(xpts , ypts, 'k--','Linewidth',2);
% Plot lines at 100ms and 2000ms
xpts = 100*ones(size(ypts));
plot(xpts , ypts, 'k--','Linewidth',1);

% PFC cell
figure; hold on;
set(gcf,'Position',[984 44 900 1045]);
subplot(4,1,[1 2]); hold on;
xaxis = -pret:binsize:postt; yaxis = 1:size(rip_spkshist_cell_PFC,1);
imagesc(xaxis,yaxis,flipud(rip_spkshist_cell_PFC));
title(['PFC CellComb Firing aligned to NOISE ripples-' num2str(binsize) 'ms bins'],...
    'FontSize',20,'Fontweight','normal');
set(gca,'XLim',[-pretp posttp]);
set(gca,'YLim',[0 size(rip_spkshist_cell_PFC,1)]);
ypts = 0:1:size(rip_spkshist_cell_PFC,1);
xpts = 0*ones(size(ypts));
% Plot Line at 0 ms - Onset of stimulation
plot(xpts , ypts, 'k--','Linewidth',3);
% Plot lines at 100ms 
xpts = 100*ones(size(ypts));
plot(xpts , ypts, 'k--','Linewidth',2);
subplot(4,1,[3 4]); hold on;
xaxis = -pret:binsize:postt;
plot(xaxis,mean(rip_spkshist_cell_PFC),'Linewidth',3);
set(gca,'XLim',[-pretp posttp]);
xlabel('Time(ms)','FontSize',20,'Fontweight','normal');
minp = min(mean(rip_spkshist_cell_PFC(:,idxs))); maxp = max(mean(rip_spkshist_cell_PFC(:,idxs)));
set(gca,'YLim',[minp-0.1 maxp+0.1]);
ypts = minp-0.1:0.1:maxp+0.1;
xpts = 0*ones(size(ypts));
% Plot Line at 0 ms - Onset of stimulation
plot(xpts , ypts, 'k--','Linewidth',2);
% Plot lines at 100ms and 2000ms
xpts = 100*ones(size(ypts));
plot(xpts , ypts, 'k--','Linewidth',1);


% Spiking KEEP - Histograms have been accumulated across epochs
% Hp cell
figure; hold on;
set(gcf,'Position',[16 44 900 1045]);
subplot(4,1,[1 2]); hold on;
xaxis = -pret:binsize:postt; yaxis = 1:size(rip_spkshist_cell_Hpk,1);
imagesc(xaxis,yaxis,flipud(rip_spkshist_cell_Hpk));
title(['Hp CellComb Firing aligned to KEEP ripples-' num2str(binsize) 'ms bins'],...
    'FontSize',20,'Fontweight','normal');
set(gca,'XLim',[-pretp posttp]);
set(gca,'YLim',[0 size(rip_spkshist_cell_Hpk,1)]);
ypts = 0:1:size(rip_spkshist_cell_Hpk,1);
xpts = 0*ones(size(ypts));
% Plot Line at 0 ms - Onset of stimulation
plot(xpts , ypts, 'k--','Linewidth',3);
% Plot lines at 100ms 
xpts = 100*ones(size(ypts));
plot(xpts , ypts, 'k--','Linewidth',2);
subplot(4,1,[3 4]); hold on;
xaxis = -pret:binsize:postt;
plot(xaxis,mean(rip_spkshist_cell_Hpk),'Linewidth',3);
set(gca,'XLim',[-pretp posttp]);
xlabel('Time(ms)','FontSize',20,'Fontweight','normal');
minp = min(mean(rip_spkshist_cell_Hpk(:,idxs))); maxp = max(mean(rip_spkshist_cell_Hpk(:,idxs)));
set(gca,'YLim',[minp-0.1 maxp+0.1]);
ypts = minp-0.1:0.1:maxp+0.1;
xpts = 0*ones(size(ypts));
% Plot Line at 0 ms - Onset of stimulation
plot(xpts , ypts, 'k--','Linewidth',2);
% Plot lines at 100ms and 2000ms
xpts = 100*ones(size(ypts));
plot(xpts , ypts, 'k--','Linewidth',1);

% PFC cell
figure; hold on;
set(gcf,'Position',[984 44 900 1045]);
subplot(4,1,[1 2]); hold on;
xaxis = -pret:binsize:postt; yaxis = 1:size(rip_spkshist_cell_PFCk,1);
imagesc(xaxis,yaxis,flipud(rip_spkshist_cell_PFCk));
title(['PFC CellComb Firing aligned to KEEP ripples-' num2str(binsize) 'ms bins'],...
    'FontSize',20,'Fontweight','normal');
set(gca,'XLim',[-pretp posttp]);
set(gca,'YLim',[0 size(rip_spkshist_cell_PFCk,1)]);
ypts = 0:1:size(rip_spkshist_cell_PFCk,1);
xpts = 0*ones(size(ypts));
% Plot Line at 0 ms - Onset of stimulation
plot(xpts , ypts, 'k--','Linewidth',3);
% Plot lines at 100ms 
xpts = 100*ones(size(ypts));
plot(xpts , ypts, 'k--','Linewidth',2);
subplot(4,1,[3 4]); hold on;
xaxis = -pret:binsize:postt;
plot(xaxis,mean(rip_spkshist_cell_PFCk),'Linewidth',3);
set(gca,'XLim',[-pretp posttp]);
xlabel('Time(ms)','FontSize',20,'Fontweight','normal');
minp = min(mean(rip_spkshist_cell_PFCk(:,idxs))); maxp = max(mean(rip_spkshist_cell_PFCk(:,idxs)));
set(gca,'YLim',[minp-0.1 maxp+0.1]);
ypts = minp-0.1:0.1:maxp+0.1;
xpts = 0*ones(size(ypts));
% Plot Line at 0 ms - Onset of stimulation
plot(xpts , ypts, 'k--','Linewidth',2);
% Plot lines at 100ms and 2000ms
xpts = 100*ones(size(ypts));
plot(xpts , ypts, 'k--','Linewidth',1);









i=1;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



