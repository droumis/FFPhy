function  showStatsByPass
%function  showStatsByPass(selectid, adaptid, opt, nsel)
%function  showStatsByPass(selectid, adaptid, opt, nsel)

plotsingle= 0;
plotMultiMean= 1;
plotMultiHist= 0; histtimes= [1];
plotmean= 0;
plotPDF= 0;
derivative= 0;
plotcorr= 0;
plotpair= 0;
plotscatter= 0;

subtract= 'none'; % subtract from each cell across time: 'none', 'first' ,'mean'
loadSpikeData= 0; % most analyses are on AF results, which don't need spike data
maxTimeDiff= -1;  % error if time difference larger than this, "-1" means no err

NSEL={};
%NSEL{1}= 29;

%adaptid= 'adapt_xp4_t005';
%adaptid= 'AS_xp4_t005';
adaptid= 'rand30ms_xp4_t005';
%adaptid= 'adapt_xp2_t1';
%adaptid= 'AS_xp2_t01';
%timeid= 'passes';
%maxt= 15;
timeid= 'occ';
timelabel= 'occupancy (sec)';
maxt= 300;
%maxt= 180;
%timeid= 'firstpass';
%maxt= 1;
%timelabel= '1st pass';
%timeid= 'end';

%% setting up the datasets

%sets{1}.selectid= 'placefields4-novel';
%sets{1}.adaptid= 'rand60ms_xp4_t005';
%sets{1}.novelDays= 1;
%sets{1}.title= 'novel-60ms';

%sets{2}.selectid= 'placefields4-fam';
%sets{2}.adaptid= 'rand60ms_xp4_t005';
%sets{2}.title= 'fam-60ms';

sets{1}.selectid= 'placefields4-train';
sets{1}.adaptid= 'AS_xp4_t005';
sets{1}.title= 'train';

sets{2}.selectid= 'placefields4-novel';
sets{2}.adaptid= 'AS_xp4_t005';
sets{2}.novelDays= 1;
sets{2}.title= '1stNovelDay';

sets{3}.selectid= 'placefields4-train';
sets{3}.adaptid= 'rand5ms_AS_xp4_t005';
sets{3}.title= '5ms';

sets{4}.selectid= 'placefields4-train';
sets{4}.adaptid= 'rand10ms_AS_xp4_t005';
sets{4}.title= '10ms';

sets{5}.selectid= 'placefields4-train';
sets{5}.adaptid= 'rand30ms_AS_xp4_t005';
sets{5}.title= '30ms';

sets{6}.selectid= 'placefields4-train';
sets{6}.adaptid= 'rand30ms_xp2_t01';
sets{6}.title= '30ms-xp2';

%sets{1}.selectid= 'placefields4-train';
%sets{1}.adaptid= adaptid;
%sets{1}.title= 'FamConf';

%sets{5}.selectid= 'placefields4-fam';
%sets{5}.adaptid= adaptid;
%sets{5}.title= 'FamArm';

%sets{2}.selectid= 'placefields4-novel';
%sets{2}.adaptid= adaptid;
%sets{2}.novelDays= 1;
%sets{2}.title= '1stNovelDay';

%sets{3}.selectid= 'placefields4-novel';
%sets{3}.adaptid= adaptid;
%sets{3}.novelDays= 2;
%sets{3}.title= '2ndNovel';

%sets{4}.selectid= 'placefields4-novel';
%sets{4}.adaptid= adaptid;
%sets{4}.novelDays= 3;
%sets{4}.title= '3rdNovel';

%% setting up the statistics to be extracted

%opt{1}.name= 'MutualInfo';
%opt{1}.title= 'MutualInfo';
opt{1}.name= 'LinCorrShift';
opt{1}.title= 'corrcoef';
opt{1}.label= 'corr coef';
opt{1}.ndeg= 3;
opt{1}.timeid= timeid;
opt{1}.timelabel= timelabel;
opt{1}.maxt= maxt;

%opt{2}.name= 'Integral2d';
%opt{2}.title= 'Volume';
%opt{2}.ndeg= 3;
%opt{2}.timeid= timeid;
%opt{2}.maxt= maxt;
%opt{2}.norm= 1;

%opt{1}.name= 'MeanTheta';
%opt{1}.title= 'MeanThetaSp';
%opt{1}.spikes= 1;
%opt{1}.ndeg= 3;
%opt{1}.timeid= timeid;
%opt{1}.maxt= maxt;


CircNames= {'MeanChange', 'MeanDispersion', 'MeanTheta', 'change weighted by min', 'change weighted  by mean'};
CircLabels= {'MeanChange', 'ang dispersion', 'MeanTheta', 'change weighted by min', 'change weighted  by mean'};
%for j=1:length(CircNames)
for j=2;
%   ind=j;
    ind=2;
    opt{j}.name= 'CircMeasures';
    opt{j}.n= ind; % [mean change, mean dispersion, mean angle, change weighted by min, change w.  by mean]
    opt{j}.ndeg= 3;
    opt{j}.title= CircNames{ind};
    opt{j}.label= CircLabels{ind};
    if(ind==3) opt{j}.circ= 1; end
    opt{j}.timeid= timeid;
    opt{j}.timelabel= timelabel;
    opt{j}.maxt= maxt;
end


MomentNames= {'meanx', 'meany', 'varx', 'vary', 'medianx', 'mediany', 'MutualInfo'};
MomentLabels= {'meanx', 'meany', 'varx', 'vary', 'medianx', 'mediany', 'mutual info (bits)'};
mapind(4)=1;
mapind(5)=3;
mapind(6)=7;
%for j=1:length(MomentNames)
%for j=4:6
for j=3;
%    ind=mapind(j);
ind=7;
    opt{j}.name= 'Moments2d';
    opt{j}.n= ind; % [mean change, mean dispersion, mean angle, change weighted by min, change w.  by mean]
    opt{j}.ndeg= 3;
    opt{j}.title= MomentNames{ind};
    opt{j}.label= MomentLabels{ind};
    if(ind==2) opt{j}.circ= 1; end
    opt{j}.timeid= timeid;
    opt{j}.timelabel= timelabel;
    opt{j}.maxt= maxt;
end


addpath('/home/chengs/theta/code')
cd /home/chengs/theta/work/
olddir= pwd;

global fmaux 

if(loadSpikeData) 
    global sp pf
    sp= {}; pf= {};
    for iS=1:length(sets)
%        allSpikeData(sets{iS}.selectid, 1)
        load(['spikeData-' sets{iS}.selectid]);
        sp{iS}= spikeData;
        pf{iS}= allPlaceFields(sets{iS}.selectid);
    end
end
%keyboard

% change titles
for iO=1:length(opt)
    switch subtract
    case 'first'
        opt{iO}.title= [opt{iO}.title '-firstsub'];
    case 'mean' % subtract cell's mean across time
        opt{iO}.title= [opt{iO}.title '-meansub'];
    end
end

%%%%%%%%%% collect stats %%%%%%%%%% 
V={}; T={};
for iS=1:length(sets)
    load(['analist-' sets{iS}.selectid])
    nC= length(analist.rat);
    if isempty(NSEL) | isempty(NSEL{iS}); 
        nsel=[1:nC];  
    else
        nsel= NSEL{iS};
    end
    if ~isfield(sets{iS}, 'novelDays') | isempty(sets{iS}.novelDays)
        selectNovelDays= 0;
        tm= allTimes(timeid, sets{iS}.selectid);
    else 
        selectNovelDays= 1;
        [tm, novelDay]= allTimes(timeid, sets{iS}.selectid);
    end
    nPF= 0;
    for iO=1:length(opt)
        V{iS}{iO}= nan*ones(nC, maxt);
        T{iS}{iO}= nan*ones(nC, maxt);
    end
    oldrat= '';

    for iC= 1:nC
        isel= find(iC== nsel);
        if isempty(isel); continue; end

        rat= analist.rat{iC};
        num= analist.cellnum(iC,:); d=num(1); e=num(2); tet=num(3); c=num(4);
        if ~strcmp(oldrat, rat) 
            oldrat= rat; 
            cd(['/data11/chengs/' rat '/' sets{iS}.adaptid]);
            setLocalOptions;
            fmaux.selectid= sets{iS}.selectid;
            fmaux.select=[ fmaux.data2dir '/select-' fmaux.selectid];
            load(['stats-' sets{iS}.selectid]);
        end
        traj= analist.traj(iC);

        if selectNovelDays & ~ismember(novelDay(iC), sets{iS}.novelDays)
            continue;
        end

        nPF= nPF+1;
%        fprintf(1,'rat= %s, n= %d\n', rat, iC);

        for iO=1:length(opt)
            if isempty(opt{iO}); continue; end

            if ~isfield(opt{iO}, 'spikes') | ~opt{iO}.spikes
        %            statstime= stats{d}{e}{tet}{c}.x{analist.iana(iC)}.time;
                statstime= stats{d}{e}{tet}{c}.([opt{iO}.name '_time']){analist.iana(iC)};
                switch opt{iO}.name
                case {'LinCorr', 'LinCorrShift'}
                    fac= -[1 -1 1 -1];
                    svar= fac(traj+1)*stats{d}{e}{tet}{c}.(opt{iO}.name){analist.iana(iC)};
                case 'Moments2d'
                    svar= stats{d}{e}{tet}{c}.Moments2d{analist.iana(iC)}(opt{iO}.n,:);
                    if(opt{iO}.n== 1) 
                        fac= [1 -1 1 -1];
                        svar= fac(traj+1)*svar; 
                        if(fac(traj+1)<0) svar= svar+240; end
                    end
                case 'CircMeasures'
                    svar= stats{d}{e}{tet}{c}.CircMeasures{analist.iana(iC)}(opt{iO}.n,:);
                otherwise
                    svar= stats{d}{e}{tet}{c}.(opt{iO}.name){analist.iana(iC)};
                end
            else % spike analyses
                statstime= tm{iC};
                svar= auxSpikeAna(sp{iS}(iC), pf{iS}(iC,:), opt{iO},statstime);
            end


            t= tm{iC};
            nt= min(length(t), maxt);
            T{iS}{iO}(iC,1:nt)= t(1:nt);
            for it=1:nt
                istats= min(find(t(it) <= statstime+1e-5));
                if isempty(istats); continue; end
                if(maxTimeDiff > 0 & abs(statstime(istats)-t(it)) > maxTimeDiff) 
                    error('could not find good time'); 
                end
                V{iS}{iO}(iC, it)= svar(istats);
            end
            switch subtract
            case 'first'
                stmp= V{iS}{iO}(iC, :);
                V{iS}{iO}(iC, :)= stmp-stmp(min(find(isfinite(svar))));
            case 'mean' % subtract cell's mean across time
                stmp= V{iS}{iO}(iC, :);
                if isfield(opt{iO},'circ') & opt{iO}.circ
                    % circular data
                    V{iS}{iO}(iC, :)= stmp-circstat(stmp);
                else
                    V{iS}{iO}(iC, :)= stmp-nanmean(stmp);
                end

            end

        end % for iC
        cd(olddir);

        if isfield(opt{iO}, 'norm') & opt{iO}.norm
            V{iS}{iO}= auxNorm(V{iS}{iO});
        end
    end % for iO, statistics 
    fprintf(1, '%3d placefields selected in %s\n', nPF, sets{iS}.title);
end % for iS, sets


for iO=1:length(opt)
    if isfield(opt{iO}, 'norm') & opt{iO}.norm
        opt{iO}.title= [opt{iO}.title '-norm'];
    end
end
%%%%%%%%%% show single var stats %%%%%%%%%% 

for iS= 1:length(sets)
    for iO=1:length(opt)
        vall= V{iS}{iO};
        tall= T{iS}{iO};

        opt{iO}.figname= [opt{iO}.name '-' opt{iO}.timeid '-' sets{iS}.adaptid '-' sets{iS}.selectid];

        switch opt{iO}.timeid
        case 'passes'
            opt{iO}.xstr= 'pass';
        case 'occ'
            opt{iO}.xstr= 'occ. (sec)';
        case 'acc'
            opt{iO}.xstr= 'acc. (sec)';
        case 'minocc'
            opt{iO}.xstr= 'occ. (min)';
        case 'minacc'
            opt{iO}.xstr= 'acc. occ. (min)';
        case 'first'
            opt{iO}.xstr= 'first';
        end

    %    if(opt{iO}.plotsingle) 
        if(plotsingle)  auxPlotSingle(vall, opt{iO}, sets{iS}); end
        if(plotmean)    auxPlotMean(vall, opt{iO}); end
        if(plotPDF)     auxPlotPDF(vall, opt{iO}); end

        %%%%%%%%%% calc and show derivatives %%%%%%%%%% 

    %    if isfield(opt{iO}, 'derivative') & opt{iO}.derivative
        if derivative
            vall= auxCalcDerivative(vall, opt{iO});
            opt{iO}.figname= ['delta-' opt{iO}.figname];
            opt{iO}.name= (['\Delta ' opt{iO}.name]);
        %    opt{iO}.maxt=5;
            auxPlotCDF(vall,opt{iO},12);
            auxPlotIND(vall,opt{iO},12);
        end
    end % for iO, statistics

    %%%%%%%%%% show two var stats %%%%%%%%%% 

    if(plotcorr | plotpair)  
        [corr,p]= auxPlotCorr(V{iS}, opt, sets{iS}.title); 
    end

    if(plotpair)  auxPlotPair(V, opt, corr, p); end

    if(plotscatter)  auxPlotScatter(V, opt); end

end % for iS, sets

for iO=1:length(opt)
    Vtmp= {};
    for iS=1:length(sets)
        Vtmp{iS}= V{iS}{iO};
    end
    if(plotMultiMean)  auxPlotMean(Vtmp, opt{iO}, sets); end
    if(plotMultiHist)  auxPlotHist(Vtmp, opt{iO}, sets, histtimes); end
end

function auxPlotSingle(vall, opt, set)
fh=figure;
ind= find(sum(isfinite(vall),2))';
n= length(ind);
nx= ceil(sqrt(n)); ny= ceil(n/nx);
for i=1:n
    iC=ind(i);
    subplot(nx, ny, i);
    ph= plot(vall(iC,:));
%    title(num2str(iC))
    xlabel(opt.label);
    ylabel(opt.timelabel);
    axis tight
%    axis off
end
%orient landscape
%print(gcf, '-depsc2', [opt.figname '-single']);
%set(fh, 'PaperPosition', [0 0 4 2]);
print(fh, '-depsc2', [opt.title '-' set.title '-' opt.timeid]);
%keyboard

function auxPlotMean(V, opt, sets)

nmin= 10;
multi= 1;
if ~iscell(V)
    V= {V};
    multi= 0;
end
nV= length(V);
maxt= opt.maxt;

circ= 0;
if(isfield(opt, 'circ') & opt.circ) circ= 1; end

plotcol= hsv(20);
plotcol(1:6,:)=[[0 0 0]; [1 0 0]; [0 1 0]; [0 0 1]; [.7 0 1]; ...
    [1 1 0]];
fillcol= rgb2hsv(plotcol);
fillcol(:,2)= .4;
fillcol= hsv2rgb(fillcol);
fillcol(1,:)= .7*[1 1 1];
figh= figure;
hold on

if ~circ
    for iV=1:nV
        nval= sum(isfinite(V{iV}));
        nval(find(nval==0))= nan;

        mvar{iV}= nanmean(V{iV});
        stdvar= nanstd(V{iV});
        sevar= stdvar./sqrt(nval);

        ind{iV}= find(isfinite(mvar{iV}) & isfinite(stdvar) & nval >= nmin);
        %fh= fill([1:maxt maxt:-1:1], [mvar{iV}(1:maxt)-stdvar(1:maxt),
        %fliplr(mvar{iV}(1:maxt)+stdvar(1:maxt))], fillcol);
        %fh= fill([ind{iV} fliplr(ind{iV})], [mvar{iV}(ind{iV})-stdvar(ind{iV}),
        %fliplr(mvar{iV}(ind{iV})+stdvar(ind{iV}))], fillcol);
%        if(iV<=2)
            fh= fill([ind{iV} fliplr(ind{iV})], [mvar{iV}(ind{iV})-sevar(ind{iV}), fliplr(mvar{iV}(ind{iV})+sevar(ind{iV}))], fillcol(iV,:));
            set(fh, 'EdgeColor', fillcol(iV,:));
%        end
    %    plot(ind{iV}, mvar{iV}(ind{iV})-sevar(ind{iV}), [plotcol{iV} '-']);
    %    plot(ind{iV}, mvar{iV}(ind{iV})+sevar(ind{iV}), [plotcol{iV} '-']);
        %plot(1:maxt, mvar{iV}(1:maxt), 'k', 'LineWidth', 3);
    end
    for iV=1:nV
        hp(iV)= plot(ind{iV}, mvar{iV}(ind{iV}), 'LineWidth', 4);
        set(hp(iV), 'Color', plotcol(iV,:));
    end
 
else % circ
    dp= {};
    for iV=1:nV
        nval= sum(isfinite(V{iV}));

        [mvar{iV}, dp{iV}]= circstat(V{iV});
        ind{iV}= find(isfinite(mvar{iV}) & nval >= nmin);
%        ind{iV}= find(mvar{iV}<0.8 & nval >= nmin);%@@ only strongly changing c

        indtmp= ind{iV};
        mtmp= mvar{iV}(ind{iV}); 
        % subtract population's mean acros time
        moff= circstat(mvar{iV}(ind{iV}));
        mtmp= mod(mtmp-moff+pi, 2*pi)-pi;
        mtmp= mod(mtmp+pi, 2*pi)-pi;
%        indtmp= [indtmp; indtmp];
%        mtmp= mod(mtmp -moff, 2*pi)-2*pi;
%        mtmp= [mtmp; 2*pi+mtmp];
        hptmp= plot(indtmp', mtmp', [plotcol{iV} 'o'], ...
            'MarkerSize', 4, 'MarkerFaceColor', plotcol{iV});
        hp(iV)= hptmp(1);
%        set(gca, 'ylim', 2*pi*[-1,1]);
    end
end

%set(gcf, 'PaperPosition', [0 0 6 4.5]);

xlabel(opt.timelabel);
ylabel(opt.label);
if multi; 
    lstr= {};
    for(iV=1:nV) lstr{iV}= sets{iV}.title; end
    legend(hp, lstr, 0)
    figname= ['multiMean-' opt.title '-' opt.timeid];
    set(gca, 'XLim', [1 maxt]);
    set(figh, 'Name', figname);
    myprint('large', figname);
else
    set(figh, 'Name', opt.figname);
    myprint('landscape', [opt.figname '-mean']);
end

if circ
    figh=figure;
    hold on
    for iV=1:nV
        plot(ind{iV}, 1-dp{iV}(ind{iV}), plotcol{iV}, 'LineWidth', 4);
    end
    legend(lstr, 0)
    figname= ['multiDisp-' opt.title '-' opt.timeid];
    set(figh, 'Name', figname);
    print(gcf, '-depsc2', figname);
end

%keyboard

function auxPlotPDF(vall, opt)
% 
[h, xbin]= hist(vall);
for it=1:opt.maxt
    h(:,it)= h(:,it)/sum(isfinite(vall(:,it)));
end
figure
if(opt.maxt >=3) 
    ind= [1 ceil(opt.maxt/2) opt.maxt];
elseif(opt.maxt ==2) 
    ind= [1 2];
else
    ind= 1;
end
plot(xbin, h(:, ind), 'LineWidth', 2);
legend(num2str(ind'));
xh= xlabel(opt.name);
ylabel('fraction');
print(gcf, '-depsc2', [opt.figname '-pdf']);
%keyboard

if(opt.maxt < 20)
    figure
    plot(xbin, h(:,1:opt.maxt), 'LineWidth', 2);
    legend(num2str([1:opt.maxt]'))
    xlabel(opt.name);
    ylabel('fraction');
end
    
fprintf(1, 'Testing distributions at beginning and end:\n');
cmpSamples(vall(:,1), vall(:,opt.maxt));

function auxPlotCDF(vall, opt, lump)
% 
if nargin<3; lump=1; end
figure
nC= size(vall,1);
%mt= min(7,opt.maxt);
mt= floor(opt.maxt/lump);
if(mt*lump~= opt.maxt) error('mt*lump~= opt.maxt'); end
h= sort(reshape(vall, nC*lump, mt));
n= nan*zeros(nC*lump, mt);
for im=1:mt
    nind= length(find(isfinite(h(:,im))));
    n(1:nind, im)= [1:nind]'/nind;
end
plot(h,n, 'LineWidth', 2);
%legend(num2str([1:mt]'))
xlabel(opt.name);
ylabel('cum. fraction');
print(gcf, '-depsc2', [opt.figname '-cdf']);

%cmpSamples(vall(:,1), vall(:,mt));

function h= auxCalcDerivative(vall, opt)

nC= size(vall,1);
pad= floor(opt.ndeg/2)+1;
h= nan*ones(size(vall));

for iC=1:nC
    % polynomial fit to f(t)
    valid= find(isfinite(vall(iC,:)));
    if length(valid)<= opt.ndeg
        vall(iC,valid)= nan;
        continue;
    end
    for j=pad+1:length(valid)-pad
        ind= valid(j-pad:j+pad);
        v= vall(iC,ind);
        p= polyfit(ind, v, opt.ndeg);

        % get derivative of polynomial
        dp= [opt.ndeg:-1:1] .* p(1:end-1);

        % calc derivative of polynomial
        h(iC,valid(j))= polyval(dp,valid(j));
    end

    %figure; hold on
    %tmp=ind(1):.1:ind(end);
    %plot(tmp, polyval(p,tmp), 'k');
    %plot(tmp, polyval(dp,tmp),'r');

end

function auxPlotIND(vall,opt,lump);
figure
if nargin<3; lump=1; end
mt= floor(opt.maxt/lump);
nC= size(vall,1);
h= sort(reshape(vall, nC*lump, mt));
x= nanmean(abs(h));
%x= x/ max(x);
bar(x)

xlabel('"t"');
ylabel(['< ' opt.name ' >']);
print(gcf, '-depsc2', [opt.figname '-IND']);

function vall= auxNorm(vall);
maxt= size(vall,2);
n= nanmean(vall')'*ones(1,maxt);
vall= vall./n;
%keyboard

function [corr, p]= auxPlotCorr(V, opt, selid)
if length(V)~= 2; error('This function can only handle two variables'); end
nC= size(V{1},1);
maxt= size(V{1},2);
corr= nan*ones(nC,1);
p= nan*ones(nC,1);
for iC=1:nC
    ind= find(isfinite(V{1}(iC,:)) & isfinite(V{2}(iC,:)));
    if length(ind) < 3;
        corr(iC)= nan;
        p(iC)= nan;
    else
        [tmp tmpp]= corrcoef(V{1}(iC,ind), V{2}(iC,ind));
        corr(iC)= tmp(1,2);
        p(iC)= tmpp(1,2);
    end
end
%figure
%subplot(3,1,1)
%hist(corr,20)
%xlabel('corr');
%subplot(3,1,2)
%hist(p,20)
%xlabel('p-value');

nvalid= sum(isfinite(corr));
%sigind= find(p < 0.05);
sigind= find(p < 0.01);
nsig= length(sigind);

%subplot(3,1,3)
%hist(corr(sigind),20)
%xlabel('sig corr');

figure
x= linspace(-1,1+1e-10,21);
h= histc(corr(sigind),x);
h(:,2)= histc(corr,x);
h(:,2)= diff(h,1,2);
hb= bar(x+(x(2)-x(1))/2,h, 'stacked');
set(hb(2),'FaceColor', 'w')
set(gca, 'XLim', [-1 1])
xlabel('correlation');
ylabel('count');

nind= sigind(find(corr(sigind)<0));
pind= sigind(find(corr(sigind)>0));
nneg=  sum(corr(sigind)<0);
percneg=  nneg/nsig*100;


%mean(corr(sigind))
%mean(corr(nind))
%mean(corr(pind))

fprintf(1, '%.1f %% of corrcoef sig\n', nsig/nvalid*100);
fprintf(1, '   of those %.1f %% pos, %.1f %% neg\n', 100-percneg, percneg);


%set(gcf, 'PaperPosition', [0 0 6 4.5]);
print(gcf, '-depsc2', ['corr-' opt{1}.title '-' opt{2}.title '-' selid '-' opt{1}.timeid]);

for iV=1:2
%for iV=1:-1
    figure; 
    subplot(2,2,1)
    plot(nanmean(V{iV}(sigind,:)))
    title('sig')
    subplot(2,2,2)
    plot(nanmean(V{iV}(nind,:)))
    title('sig and neg')
    subplot(2,2,3)
    plot(nanmean(V{iV}(pind,:)))
    title('sig and pos')
    subplot(2,2,4)
    plot(nanmean(V{iV}))
    title('all')
end
%keyboard

function auxPlotPair(V, opt, corr, p)
figure
nC= size(V{1},1);
nx= ceil(sqrt(nC)); ny= ceil(nC/nx);
for iC=1:nC
    if(p(iC) < 0.01)
        plotsym= '-';
    else
        plotsym= ':';
%        continue
    end
    ind= find(isfinite(V{1}(iC,:)) & isfinite(V{2}(iC,:)));
    if isempty(ind); continue; end;

    subplot(nx, ny, iC);
    plot([V{1}(iC,ind)' V{2}(iC,ind)'], plotsym);
    title([num2str(iC) ', ' num2str(corr(iC))])
%    axis tight
    set(gca, 'ylim', [0 2]);
    axis off
end

%orient landscape
print(gcf, '-depsc2', ['pair-' opt{1}.figname '-' opt{2}.name]);
%    keyboard

function auxPlotPairOnly(V, opt,nsel)
figure
nS= length(nsel)
nx= ceil(sqrt(nS)); ny= ceil(nS/nx);
plotsym= '-';
for iS=1:nS
    iC= nsel(iS);
    subplot(nx, ny, iS);
    ind= find(isfinite(V{1}(iC,:)) & isfinite(V{2}(iC,:)));
    plot([V{1}(iC,ind)' V{2}(iC,ind)'], plotsym);
    axis tight
    axis off
end

%keyboard
%orient landscape
print(gcf, '-depsc2', ['pair-' opt{1}.figname '-' opt{2}.name]);

function auxPlotScatter(V, opt)
figure
nC= size(V{1},1);
maxt= size(V{1},2);
ind= find(isfinite(V{1}) & isfinite(V{2}));
nind= length(ind);
v1= V{1}(ind); v2= V{2}(ind);
plot(v1, v2, '.');
xlabel(opt{1}.name);
ylabel(opt{2}.name);
[tmp, tmpp]= corrcoef(v1,v2);
C= tmp(1,2);
p= tmpp(1,2);
title(sprintf('corr= %.2f, p= %.4g', C, p));
[b,bint,r,rint,stats] = regress(v2,[v1 ones(nind,1)]);
%@@@
%    keyboard
print(gcf, '-depsc2', ['scatter-' opt{1}.figname '-' opt{2}.name]);

function svar= auxSpikeAna(sp, pf, opt, t);
nt= length(t);
svar= nan*zeros(1,nt);

indall= find(pf(1)<sp.linpos & sp.linpos<pf(2));
ind= {};
t= [0, t];
for it=1:nt
    ind{it}= find(t(it)<sp.time(indall) & sp.time(indall)<t(it+1));
end

switch opt.name
case {'MeanTheta'}
    for it=1:nt;
        th= sp.theta(ind{it});
        svar(it)= circstat(th);
    end
case {'ThetaDispersion'}
    for it=1:nt;
        th= sp.theta(ind{it});
        [m,svar(it)]= circstat(th);
    end
end
%keyboard

function auxPlotHist(v, opt, sets, t)

alpha=0.05;
nt= length(t);
nC= size(v{1},1);
maxt= size(v{1},2);
if sum(t>maxt) | sum(t<1); error('requested invalid time'); end
nx= ceil(sqrt(nt)); ny= ceil(nt/nx);
nv= length(v);
testval= 0;
if(strcmp(opt.title, 'MeanDispersion')) testval= 1; end

if(0)
for iv=1:nv
    fh= figure;
    for it=1:nt
        subplot(nx,ny,it);
        [n,x]= hist(v{iv}(:,t(it)),15);
        bar(x,n);
    %    plot(x,n, 'k-', 'LineWidth', 2)
        xlabel(opt.label);
        ylabel('count');
        axis tight

%        [h, p]= ttest(v{iv}(:,t(it)), testval, alpha, 0);
%        title(sprintf('ti= %d, p= %.4g', t(it), p));
    end

    figname= ['hist-' opt.title '-' sets{iv}.title '-' opt.timeid];
    set(fh, 'Name', figname);
%    set(gcf, 'PaperPosition', [0 0 4 3]);
    print(gcf, '-depsc2', figname);
end
else

lstr= {}; lstrcat= sets{1}.title;
for(iv=1:nv) 
    lstr{iv}= sets{iv}.title; 
    if(iv>1) lstrcat= [lstrcat '-' lstr{iv}]; end
end

for it=1:nt
    figure
    vtmp= zeros(nC,nv);
    for iv=1:nv
        vtmp(:,iv)= v{iv}(:,t(it));
    end
    [n,x]= hist(vtmp, 15);

    subplot(nx,ny,it);
    bar(x,n);
    xlabel(opt.label);
    ylabel('count');
    legend(lstr);

    figname= sprintf('hist-%s-%s-%s', opt.title, lstrcat, opt.timeid);
    set(gcf, 'Name', figname);
%    set(gcf, 'PaperPosition', [0 0 4 3]);
    if nv==2
        m1= v{1}(:,t(it)); m1=m1(isfinite(m1));
        m2= v{2}(:,t(it)); m2=m2(isfinite(m2));
        p= ranksum(m1, m2, alpha);
        title(sprintf('ranksum test, p=%.2g\n', p)); 
    end
end
    if(nt==1) 
        myprint('small', figname);
    else
        myprint('large', figname);
    end
end

fprintf(1, 'variable  %s\n', opt.title);

ref= 2;
for it=1:nt
    fprintf(1, 't= %d\n', t(it));
    m1= v{ref}(:,t(it)); m1=m1(isfinite(m1));
    for iv=1:nv
        if(iv==ref); continue; end
        m2= v{iv}(:,t(it)); m2=m2(isfinite(m2));
%        [h, p]= ttest2(m1,m2, alpha, 0);
%        fprintf(1, 'two sample t-test F(%s)=F(%s), p=%.4g\n', sets{ref}.title, sets{iv}.title, p); 
            p= ranksum(m1, m2, alpha);
            fprintf(1, 'ranksum test F(%s)=F(%s), p=%.4g\n', sets{ref}.title, sets{iv}.title, p); 
    end

end

%keyboard

