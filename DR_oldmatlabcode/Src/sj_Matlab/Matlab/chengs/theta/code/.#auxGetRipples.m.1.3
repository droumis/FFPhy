function [rip, frac]= auxGetRipples(rat, d, e, ripStr)
%function rip= auxGetRipples(rat, d, e, ripStr)

if nargin < 4; ripStr= ''; end

global behavdata ripples
setRoot
data2dir= fullfile(root,rat,'data2');

invalid= [];

switch (ripStr)
case {'ripple40ms'}
    loadVar(data2dir,'ripples',0,'',0,'ripples_40ms');
    rip= ripples{d}{e}.data;
case {'ripple3'}
    loadVar(data2dir,'ripples',0,'',0,'ripples_3std');
    rip= ripples{d}{e}.data;
case {'ripple35'}
    loadVar(data2dir,'ripples',0,'',0,'ripples_3_5std');
    rip= ripples{d}{e}.data;
case {'ripple4'}
    loadVar(data2dir,'ripples',0,'',0,'ripples_4std');
    rip= ripples{d}{e}.data;
case {'ripple5'}
    loadVar(data2dir,'ripples',0,'',0,'ripples_5std');
    rip= ripples{d}{e}.data;
case {'ripple6'}
    loadVar(data2dir,'ripples',0,'',0,'ripples_6std');
    rip= ripples{d}{e}.data;
case {'', 'ripple'}
    loadVar(data2dir, 'behavdata', d);
    rip= behavdata{d}{e}.ripple;
case 'xripple'  % 3StdOver, <4cm/s
    loadVar(data2dir, 'behavdata', d);
    rip= behavdata{d}{e}.ripple;
    invalid= behavdata{d}{e}.traj>=0;
case 'yripple'  % 3StdOver, <4cm/s
    loadVar(data2dir, 'behavdata', d);
    valid= behavdata{d}{e}.traj<0;
    nlen= length(valid);
    [lo,hi]= findcontiguous(find(valid));
    pad= 250;
    lo= lo-pad; lo(lo<1)= 1;
    hi= hi+pad; hi(hi>nlen)= nlen;
    valid(makecontiguous(lo,hi))=1;
    invalid= ~valid;
    rip= behavdata{d}{e}.ripple;
case 'eripple'
    global lindistpos
    datadir= fullfile(root,rat,'data');
    loadVar(datadir, 'lindistpos', d, rat, 1);
    valid=  lindistpos{d}{e}.estinfothetavel>=0;
    nlen= length(valid);
    [lo,hi]= findcontiguous(find(valid));
    pad= 1200;
    lo= lo-pad; lo(lo<1)= 1;
    hi= hi+pad; hi(hi>nlen)= nlen;
    valid(makecontiguous(lo,hi))=1;
    invalid= ~valid;
    loadVar(data2dir, 'behavdata', d);
    rip= behavdata{d}{e}.ripple;
case 'fripple'
    global lindistpos
    datadir= fullfile(root,rat,'data');
    loadVar(datadir, 'lindistpos', d, rat, 1);
    valid=  lindistpos{d}{e}.estinfothetavel>=0;
    nlen= length(valid);
    [lo,hi]= findcontiguous(find(valid));
    pad= 250;
    lo= lo-pad; lo(lo<1)= 1;
    hi= hi+pad; hi(hi>nlen)= nlen;
    valid(makecontiguous(lo,hi))=1;
    invalid= ~valid;
    loadVar(data2dir, 'behavdata', d);
    rip= behavdata{d}{e}.ripple;
case 'gripple'
    global lindistpos
    datadir= fullfile(root,rat,'data');
    loadVar(datadir, 'lindistpos', d, rat, 1);
    valid=  lindistpos{d}{e}.estinfothetavel>=0;
    invalid= ~valid;
    loadVar(data2dir, 'behavdata', d);
    rip= behavdata{d}{e}.ripple;
case 'iripple'
    global lindistpos
    datadir= fullfile(root,rat,'data');
    loadVar(datadir, 'lindistpos', d, rat, 1);
    valid=  lindistpos{d}{e}.estinfothetavel>=0;
    nlen= length(valid);
    [lo,hi]= findcontiguous(find(valid));
    pad= 250;
    lo= lo-pad; lo(lo<1)= 1;
    hi= hi+pad; hi(hi>nlen)= nlen;
    valid(makecontiguous(lo,hi))=1;
    invalid= valid;
    loadVar(data2dir, 'behavdata', d);
    rip= behavdata{d}{e}.ripple;
case 'tripple'
    global lindistpos
    datadir= fullfile(root,rat,'data');
    loadVar(datadir, 'lindistpos', d, rat, 1);
    loadVar(data2dir, 'behavdata', d);
    invalid= behavdata{d}{e}.traj>=0 | lindistpos{d}{e}.estinfothetavel>=0;
    rip= behavdata{d}{e}.ripple;
otherwise
    error('unknown ripStr');
end

if isempty(invalid); return; end

[b(:,1) b(:,2)]= findcontiguous(find(rip));
nrip= size(b,1);
nrej= 0;
for ir=1:nrip
    if any(invalid(b(ir,1):b(ir,2)))
        rip(b(ir,1):b(ir,2))= false;
        nrej= nrej+1;
    end
end
frac= nrej/ nrip;

