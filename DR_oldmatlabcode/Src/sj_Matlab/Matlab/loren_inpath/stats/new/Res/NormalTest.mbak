% NormalTest: Measures a sample for consistency with a normal distribution based 
%             on the Shapiro-Wilks' test (Royston 1993).  Handlescensored or 
%             uncensored data.  The S-W statistic W is approximately the
%             squared correlation between the sorted data and the corresponding
%             normal scores.
%
%     Usage: [W,probW,a] = normaltest(x,{ncens},{censdir})
%
%         x =       data vector.
%         ncens =   optional number of additional censored values [default = 0].
%         censdir = optional boolean variable indicating the direction of censoring:
%                     0 = left-censored [default];
%                     1 = right-censored.
%         ------------------------------------------------------------------------
%         W =       test statistic value.
%         probW =   significance level of W.
%

% Royston, P. 1993. A toolkit for testing for non-normality in complete and
%   censored samples.  The Statistician 42:37-43.

% RE Strauss, 12/8/02

function [W,probW,a] = normaltest(x,ncens,censdir)
  if (nargin < 2) ncens = []; end;
  if (nargin < 3) censdir = []; end;
  
  if (isempty(ncens))
    ncens = 0;
  end;
  if (isempty(censdir))
    censdir = 0;
  end;

  if (ncens>0 & ~censdir)           % Convert right-censored values to left-censored
    x = -x;
  end;
  x = sort(x(:));                   % Sort input data
  
  n = length(x);
  ntot = n + ncens;
  n2 = floor(ntot/2);
  nn2=floor(ntot/2);

  if (ntot<3)
    error('  NormalTest: N must be >= 3.');
  end;
  if (ncens<0 | (ncens>0 & ntot<20)) 
    error('  NormalTest: Invalid number of censored values.');
    return;
  end;
  if (ncens/ntot > 0.8) 
    error('  NormalTest: Too many censored values (max 80%).');
    return;
  end;
    
  c1 = fliplr([0.0e0, 0.221157e0, -0.147981e0, -0.207119e1, 0.4434685e1, -0.2706056e1]);
  c2 = fliplr([0.0e0, 0.42981e-1, -0.293762e0, -0.1752461e1, 0.5682633e1, -0.3582633e1]);
  c3 = fliplr([0.5440e0, -0.39978e0, 0.25054e-1, -0.6714e-3]);
  c4 = fliplr([0.13822e1, -0.77857e0, 0.62767e-1, -0.20322e-2]);
  c5 = fliplr([-0.15861e1, -0.31082e0, -0.83751e-1, 0.38915e-2]);
  c6 = fliplr([-0.4803e0, -0.82676e-1, 0.30302e-2]);
  c7 = fliplr([0.164e0, 0.533e0]);
  c8 = fliplr([0.1736e0, 0.315e0]);
  c9 = fliplr([0.256e0, -0.635e-2]);
  g =  fliplr([-0.2273e1, 0.459e0]);
  z90 = 0.12816e1;
  z95 = 0.16449e1;
  z99 = 0.23263e1;
  zm = 0.17509e1;
  zss = 0.56268e0;
  bf1 = 0.8378e0;
  xx90 = 0.556e0;
  xx95 = 0.622e0;

  sqrth = 1/sqrt(2);
  stqr = 0.1047198e1;
  pi6 = 6/pi;
  small = 1e-19;
  
  pw=1;
  w=1;
  
  m = rankits(ntot);                        % Rankits
  
  
  
  
%   if (ntot==3)     % Calculate coefficients for the test
%     a(1)=sqrth;
%   else
%     summ2=0;
%     for i=1:n2
%       a(i)=normcdf((i-0.375)/(ntot+0.25));
%       summ2=summ2+a(i)^2;
%     end
%     summ2=summ2*2;
%     ssumm2=sqrt(summ2);
%     rsn=1/sqrt(ntot);
%     a1=polyval(c1,rsn)-a(1)/ssumm2;
%     
%     if (ntot>5)                            % Normalize coefficients
%       i1=3;
%       a2=-a(2)/ssumm2+polyval(c2,rsn);
%       fac=sqrt((summ2-2*a(1)^2-2*a(2)^2)/(1-2*a1^2-2*a2^2));
%       a(1)=a1;
%       a(2)=a2;
%     else
%       i1=2;
%       fac=sqrt((summ2-2*a(1)^2)/(1-2*a1^2));
%       a(1)=a1;
%     end;
%     a(i1:nn2)=-a(i1:nn2)/fac;
%   end;
  
a  
        
%   rng=x(ntot)-x(1);
%   if (rng<small) 
%     error('  NormalTest: data are invariant.');
%     return;
%   end;
%         
%   xx=x(1)/rng;              % Scale x by range
%   sx=xx;
%   sa=-a(1);
%   j=n-1;
%   for i=2:n
%     xi=x(i)/rng;
%     sx=sx+xi;
%     if (i~=j) 
% %       sa=sa+sign(1,i-j)*a(min([i,j]));
%       sa=sa+sign(i-j)*a(min([i,j]));
%     end;
%     xx=xi;
%     j=j-1;
%   end;
        
% Calculate W statistic as squared correlation
% between data and coefficients

%   sa=sa/n;
%   sx=sx/n;
%   ssa=0;
%   ssx=0;
%   sax=0;
%   j=n;
%   for i=1:n
%     if (i~=j)
% %       asa=sign(1,i-j)*a(min([i,j]))-sa;
%       asa=sign(i-j)*a(min([i,j]))-sa;
%     else
%       asa=-sa;
%     end;
%     xsx=x(i)/rng-sx;
%     ssa=ssa+asa*asa;
%     ssx=ssx+xsx*xsx;
%     sax=sax+asa*xsx;
%     j=j-1;
%   end;
% 
%   ssassx=sqrt(ssa*ssx);
%   w1=(ssassx-sax)*(ssassx+sax)/(ssa*ssx);
%   W=1-w1;

W = corr(a,x).^2
  
  % Calculate significance level for W (exact for n=3)
  
  if (n==3) 
    probW = pi6*(asin(sqrt(w))-stqr);
    return;
  end
  y=log(w1);
  xx=log(n);
  m=0;
  s=1;
  if (n<=11) 
    gamma=polyval(g,n);
    if (y>=gamma) 
      probW = small;
      return;
    end;
    y=-log(gamma-y);
    m=polyval(c3,n);
    s=exp(polyval(c4,n));
  else
    m=polyval(c5,xx);
    s=exp(polyval(c6,xx));
  end;
        
  % Censoring by proportion ncens/n.
  % Calculate mean and sd of normal equivalent deviate of W.
  
  if (ncens>0) 
    ld=-log(delta);
    bf=one+xx*bf1;
    z90f=z90+bf*polyval(c7,xx90^xx)^ld;
    z95f=z95+bf*polyval(c8,xx95^xx)^ld;
    z99f=z99+bf*polyval(c9,xx)^ld;

    % Regress z90f,...,z99f on normal deviates z90,...,z99 to get
    % pseudo-mean and pseudo-sd of z as the slope and intercept.

    zfm=(z90f+z95f+z99f)/3;
    zsd=(z90*(z90f-zfm)+z95*(z95f-zfm)+z99*(z99f-zfm))/zss;
    zbar=zfm-zsd*zm;
    m=m+zbar*s;
    s=s*zsd;
  end;
  
  probW = 1-normcdf(y-m);
  
  return;
