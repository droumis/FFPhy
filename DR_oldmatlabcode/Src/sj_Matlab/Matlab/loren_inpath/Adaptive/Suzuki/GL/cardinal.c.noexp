#include <stdio.h>
#include <stdlib.h>
#include <math.h>

void cardinal(float *cpx, float *cpy, int ncp, float *x, float *y, int npoints)
	/* for each of the npoints values in the array x, returns in y the value of the
	 * cardinal spline at that point.  */
{
	int 	i,j;
	float	x1, x2, x3;
	float	xtmp[4];


	for (i = 0; i < npoints ; i++) {
		/* find the segment of the spline containing the current point */
		j = 0;
		while (!(((x[i] >= cpx[j]) && (x[i] < cpx[j+1])) && (j <= ncp - 2))) {
			j++;
		}
		if (j == ncp - 2) {
			fprintf(stderr, "Error in cardinal: point outside spline bounds\n");
			exit(1);
		}
		/* compute the value of the spline at this point */
		x1 = (float) (x[i] - cpx[j]) / (float) (cpx[j+1] - cpx[j]);
		x2 = x1 * x1;
		x3 = x2 * x1;
/*		y[i] = exp(cpy[j-1]*(-.5*x3 + x2 -.5*x1) + cpy[j]*(1.5*x3 - 2.5*x2 + 1) + 
				   cpy[j+1]*(-1.5*x3 + 2.0*x2 + .5*x1) + cpy[j+2]*(.5*x3 - .5*x2));  */
		/*	 test */
		xtmp[0] = (-1*x3 + 2*x2 -1*x1);
		xtmp[1] = (1*x3 - 2*x2 + 1);
		xtmp[2] = (-1*x3 + 1*x2 + 1*x1);
		xtmp[3] = (x3 - x2); 
		y[i] = ((cpy[j-1]-1)*xtmp[0] + (cpy[j]-1)*xtmp[1] + 
				   (cpy[j+1]-1)*xtmp[2] + (cpy[j+2]-1)*xtmp[3]); 
	}
}
